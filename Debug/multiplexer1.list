
multiplexer1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cf8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08003e80  08003e80  00013e80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ee8  08003ee8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003ee8  08003ee8  00013ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ef0  08003ef0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ef0  08003ef0  00013ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ef4  08003ef4  00013ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003ef8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000204  20000070  20000070  00020070  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000274  20000274  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000514f  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001217  00000000  00000000  00025232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000508  00000000  00000000  00026450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000003b0  00000000  00000000  00026958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020df0  00000000  00000000  00026d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00005fab  00000000  00000000  00047af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ccc7f  00000000  00000000  0004daa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001908  00000000  00000000  0011a724  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  0011c02c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003e68 	.word	0x08003e68

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08003e68 	.word	0x08003e68

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_uldivmod>:
 8000aa0:	b953      	cbnz	r3, 8000ab8 <__aeabi_uldivmod+0x18>
 8000aa2:	b94a      	cbnz	r2, 8000ab8 <__aeabi_uldivmod+0x18>
 8000aa4:	2900      	cmp	r1, #0
 8000aa6:	bf08      	it	eq
 8000aa8:	2800      	cmpeq	r0, #0
 8000aaa:	bf1c      	itt	ne
 8000aac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ab0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ab4:	f000 b970 	b.w	8000d98 <__aeabi_idiv0>
 8000ab8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000abc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ac0:	f000 f806 	bl	8000ad0 <__udivmoddi4>
 8000ac4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000acc:	b004      	add	sp, #16
 8000ace:	4770      	bx	lr

08000ad0 <__udivmoddi4>:
 8000ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad4:	9e08      	ldr	r6, [sp, #32]
 8000ad6:	460d      	mov	r5, r1
 8000ad8:	4604      	mov	r4, r0
 8000ada:	460f      	mov	r7, r1
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d14a      	bne.n	8000b76 <__udivmoddi4+0xa6>
 8000ae0:	428a      	cmp	r2, r1
 8000ae2:	4694      	mov	ip, r2
 8000ae4:	d965      	bls.n	8000bb2 <__udivmoddi4+0xe2>
 8000ae6:	fab2 f382 	clz	r3, r2
 8000aea:	b143      	cbz	r3, 8000afe <__udivmoddi4+0x2e>
 8000aec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000af0:	f1c3 0220 	rsb	r2, r3, #32
 8000af4:	409f      	lsls	r7, r3
 8000af6:	fa20 f202 	lsr.w	r2, r0, r2
 8000afa:	4317      	orrs	r7, r2
 8000afc:	409c      	lsls	r4, r3
 8000afe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b02:	fa1f f58c 	uxth.w	r5, ip
 8000b06:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b0a:	0c22      	lsrs	r2, r4, #16
 8000b0c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b10:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b14:	fb01 f005 	mul.w	r0, r1, r5
 8000b18:	4290      	cmp	r0, r2
 8000b1a:	d90a      	bls.n	8000b32 <__udivmoddi4+0x62>
 8000b1c:	eb1c 0202 	adds.w	r2, ip, r2
 8000b20:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000b24:	f080 811c 	bcs.w	8000d60 <__udivmoddi4+0x290>
 8000b28:	4290      	cmp	r0, r2
 8000b2a:	f240 8119 	bls.w	8000d60 <__udivmoddi4+0x290>
 8000b2e:	3902      	subs	r1, #2
 8000b30:	4462      	add	r2, ip
 8000b32:	1a12      	subs	r2, r2, r0
 8000b34:	b2a4      	uxth	r4, r4
 8000b36:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b3a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b3e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b42:	fb00 f505 	mul.w	r5, r0, r5
 8000b46:	42a5      	cmp	r5, r4
 8000b48:	d90a      	bls.n	8000b60 <__udivmoddi4+0x90>
 8000b4a:	eb1c 0404 	adds.w	r4, ip, r4
 8000b4e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000b52:	f080 8107 	bcs.w	8000d64 <__udivmoddi4+0x294>
 8000b56:	42a5      	cmp	r5, r4
 8000b58:	f240 8104 	bls.w	8000d64 <__udivmoddi4+0x294>
 8000b5c:	4464      	add	r4, ip
 8000b5e:	3802      	subs	r0, #2
 8000b60:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b64:	1b64      	subs	r4, r4, r5
 8000b66:	2100      	movs	r1, #0
 8000b68:	b11e      	cbz	r6, 8000b72 <__udivmoddi4+0xa2>
 8000b6a:	40dc      	lsrs	r4, r3
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	e9c6 4300 	strd	r4, r3, [r6]
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	428b      	cmp	r3, r1
 8000b78:	d908      	bls.n	8000b8c <__udivmoddi4+0xbc>
 8000b7a:	2e00      	cmp	r6, #0
 8000b7c:	f000 80ed 	beq.w	8000d5a <__udivmoddi4+0x28a>
 8000b80:	2100      	movs	r1, #0
 8000b82:	e9c6 0500 	strd	r0, r5, [r6]
 8000b86:	4608      	mov	r0, r1
 8000b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8c:	fab3 f183 	clz	r1, r3
 8000b90:	2900      	cmp	r1, #0
 8000b92:	d149      	bne.n	8000c28 <__udivmoddi4+0x158>
 8000b94:	42ab      	cmp	r3, r5
 8000b96:	d302      	bcc.n	8000b9e <__udivmoddi4+0xce>
 8000b98:	4282      	cmp	r2, r0
 8000b9a:	f200 80f8 	bhi.w	8000d8e <__udivmoddi4+0x2be>
 8000b9e:	1a84      	subs	r4, r0, r2
 8000ba0:	eb65 0203 	sbc.w	r2, r5, r3
 8000ba4:	2001      	movs	r0, #1
 8000ba6:	4617      	mov	r7, r2
 8000ba8:	2e00      	cmp	r6, #0
 8000baa:	d0e2      	beq.n	8000b72 <__udivmoddi4+0xa2>
 8000bac:	e9c6 4700 	strd	r4, r7, [r6]
 8000bb0:	e7df      	b.n	8000b72 <__udivmoddi4+0xa2>
 8000bb2:	b902      	cbnz	r2, 8000bb6 <__udivmoddi4+0xe6>
 8000bb4:	deff      	udf	#255	; 0xff
 8000bb6:	fab2 f382 	clz	r3, r2
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	f040 8090 	bne.w	8000ce0 <__udivmoddi4+0x210>
 8000bc0:	1a8a      	subs	r2, r1, r2
 8000bc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bc6:	fa1f fe8c 	uxth.w	lr, ip
 8000bca:	2101      	movs	r1, #1
 8000bcc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bd0:	fb07 2015 	mls	r0, r7, r5, r2
 8000bd4:	0c22      	lsrs	r2, r4, #16
 8000bd6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000bda:	fb0e f005 	mul.w	r0, lr, r5
 8000bde:	4290      	cmp	r0, r2
 8000be0:	d908      	bls.n	8000bf4 <__udivmoddi4+0x124>
 8000be2:	eb1c 0202 	adds.w	r2, ip, r2
 8000be6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000bea:	d202      	bcs.n	8000bf2 <__udivmoddi4+0x122>
 8000bec:	4290      	cmp	r0, r2
 8000bee:	f200 80cb 	bhi.w	8000d88 <__udivmoddi4+0x2b8>
 8000bf2:	4645      	mov	r5, r8
 8000bf4:	1a12      	subs	r2, r2, r0
 8000bf6:	b2a4      	uxth	r4, r4
 8000bf8:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bfc:	fb07 2210 	mls	r2, r7, r0, r2
 8000c00:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c04:	fb0e fe00 	mul.w	lr, lr, r0
 8000c08:	45a6      	cmp	lr, r4
 8000c0a:	d908      	bls.n	8000c1e <__udivmoddi4+0x14e>
 8000c0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c10:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c14:	d202      	bcs.n	8000c1c <__udivmoddi4+0x14c>
 8000c16:	45a6      	cmp	lr, r4
 8000c18:	f200 80bb 	bhi.w	8000d92 <__udivmoddi4+0x2c2>
 8000c1c:	4610      	mov	r0, r2
 8000c1e:	eba4 040e 	sub.w	r4, r4, lr
 8000c22:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c26:	e79f      	b.n	8000b68 <__udivmoddi4+0x98>
 8000c28:	f1c1 0720 	rsb	r7, r1, #32
 8000c2c:	408b      	lsls	r3, r1
 8000c2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c36:	fa05 f401 	lsl.w	r4, r5, r1
 8000c3a:	fa20 f307 	lsr.w	r3, r0, r7
 8000c3e:	40fd      	lsrs	r5, r7
 8000c40:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c44:	4323      	orrs	r3, r4
 8000c46:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c4a:	fa1f fe8c 	uxth.w	lr, ip
 8000c4e:	fb09 5518 	mls	r5, r9, r8, r5
 8000c52:	0c1c      	lsrs	r4, r3, #16
 8000c54:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c58:	fb08 f50e 	mul.w	r5, r8, lr
 8000c5c:	42a5      	cmp	r5, r4
 8000c5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c62:	fa00 f001 	lsl.w	r0, r0, r1
 8000c66:	d90b      	bls.n	8000c80 <__udivmoddi4+0x1b0>
 8000c68:	eb1c 0404 	adds.w	r4, ip, r4
 8000c6c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c70:	f080 8088 	bcs.w	8000d84 <__udivmoddi4+0x2b4>
 8000c74:	42a5      	cmp	r5, r4
 8000c76:	f240 8085 	bls.w	8000d84 <__udivmoddi4+0x2b4>
 8000c7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000c7e:	4464      	add	r4, ip
 8000c80:	1b64      	subs	r4, r4, r5
 8000c82:	b29d      	uxth	r5, r3
 8000c84:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c88:	fb09 4413 	mls	r4, r9, r3, r4
 8000c8c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c90:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c94:	45a6      	cmp	lr, r4
 8000c96:	d908      	bls.n	8000caa <__udivmoddi4+0x1da>
 8000c98:	eb1c 0404 	adds.w	r4, ip, r4
 8000c9c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000ca0:	d26c      	bcs.n	8000d7c <__udivmoddi4+0x2ac>
 8000ca2:	45a6      	cmp	lr, r4
 8000ca4:	d96a      	bls.n	8000d7c <__udivmoddi4+0x2ac>
 8000ca6:	3b02      	subs	r3, #2
 8000ca8:	4464      	add	r4, ip
 8000caa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cae:	fba3 9502 	umull	r9, r5, r3, r2
 8000cb2:	eba4 040e 	sub.w	r4, r4, lr
 8000cb6:	42ac      	cmp	r4, r5
 8000cb8:	46c8      	mov	r8, r9
 8000cba:	46ae      	mov	lr, r5
 8000cbc:	d356      	bcc.n	8000d6c <__udivmoddi4+0x29c>
 8000cbe:	d053      	beq.n	8000d68 <__udivmoddi4+0x298>
 8000cc0:	b156      	cbz	r6, 8000cd8 <__udivmoddi4+0x208>
 8000cc2:	ebb0 0208 	subs.w	r2, r0, r8
 8000cc6:	eb64 040e 	sbc.w	r4, r4, lr
 8000cca:	fa04 f707 	lsl.w	r7, r4, r7
 8000cce:	40ca      	lsrs	r2, r1
 8000cd0:	40cc      	lsrs	r4, r1
 8000cd2:	4317      	orrs	r7, r2
 8000cd4:	e9c6 7400 	strd	r7, r4, [r6]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	2100      	movs	r1, #0
 8000cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce0:	f1c3 0120 	rsb	r1, r3, #32
 8000ce4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ce8:	fa20 f201 	lsr.w	r2, r0, r1
 8000cec:	fa25 f101 	lsr.w	r1, r5, r1
 8000cf0:	409d      	lsls	r5, r3
 8000cf2:	432a      	orrs	r2, r5
 8000cf4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf8:	fa1f fe8c 	uxth.w	lr, ip
 8000cfc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d00:	fb07 1510 	mls	r5, r7, r0, r1
 8000d04:	0c11      	lsrs	r1, r2, #16
 8000d06:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d0a:	fb00 f50e 	mul.w	r5, r0, lr
 8000d0e:	428d      	cmp	r5, r1
 8000d10:	fa04 f403 	lsl.w	r4, r4, r3
 8000d14:	d908      	bls.n	8000d28 <__udivmoddi4+0x258>
 8000d16:	eb1c 0101 	adds.w	r1, ip, r1
 8000d1a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d1e:	d22f      	bcs.n	8000d80 <__udivmoddi4+0x2b0>
 8000d20:	428d      	cmp	r5, r1
 8000d22:	d92d      	bls.n	8000d80 <__udivmoddi4+0x2b0>
 8000d24:	3802      	subs	r0, #2
 8000d26:	4461      	add	r1, ip
 8000d28:	1b49      	subs	r1, r1, r5
 8000d2a:	b292      	uxth	r2, r2
 8000d2c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d30:	fb07 1115 	mls	r1, r7, r5, r1
 8000d34:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d38:	fb05 f10e 	mul.w	r1, r5, lr
 8000d3c:	4291      	cmp	r1, r2
 8000d3e:	d908      	bls.n	8000d52 <__udivmoddi4+0x282>
 8000d40:	eb1c 0202 	adds.w	r2, ip, r2
 8000d44:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d48:	d216      	bcs.n	8000d78 <__udivmoddi4+0x2a8>
 8000d4a:	4291      	cmp	r1, r2
 8000d4c:	d914      	bls.n	8000d78 <__udivmoddi4+0x2a8>
 8000d4e:	3d02      	subs	r5, #2
 8000d50:	4462      	add	r2, ip
 8000d52:	1a52      	subs	r2, r2, r1
 8000d54:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d58:	e738      	b.n	8000bcc <__udivmoddi4+0xfc>
 8000d5a:	4631      	mov	r1, r6
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	e708      	b.n	8000b72 <__udivmoddi4+0xa2>
 8000d60:	4639      	mov	r1, r7
 8000d62:	e6e6      	b.n	8000b32 <__udivmoddi4+0x62>
 8000d64:	4610      	mov	r0, r2
 8000d66:	e6fb      	b.n	8000b60 <__udivmoddi4+0x90>
 8000d68:	4548      	cmp	r0, r9
 8000d6a:	d2a9      	bcs.n	8000cc0 <__udivmoddi4+0x1f0>
 8000d6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000d70:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d74:	3b01      	subs	r3, #1
 8000d76:	e7a3      	b.n	8000cc0 <__udivmoddi4+0x1f0>
 8000d78:	4645      	mov	r5, r8
 8000d7a:	e7ea      	b.n	8000d52 <__udivmoddi4+0x282>
 8000d7c:	462b      	mov	r3, r5
 8000d7e:	e794      	b.n	8000caa <__udivmoddi4+0x1da>
 8000d80:	4640      	mov	r0, r8
 8000d82:	e7d1      	b.n	8000d28 <__udivmoddi4+0x258>
 8000d84:	46d0      	mov	r8, sl
 8000d86:	e77b      	b.n	8000c80 <__udivmoddi4+0x1b0>
 8000d88:	3d02      	subs	r5, #2
 8000d8a:	4462      	add	r2, ip
 8000d8c:	e732      	b.n	8000bf4 <__udivmoddi4+0x124>
 8000d8e:	4608      	mov	r0, r1
 8000d90:	e70a      	b.n	8000ba8 <__udivmoddi4+0xd8>
 8000d92:	4464      	add	r4, ip
 8000d94:	3802      	subs	r0, #2
 8000d96:	e742      	b.n	8000c1e <__udivmoddi4+0x14e>

08000d98 <__aeabi_idiv0>:
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop

08000d9c <switchMuxPin>:
    }

}

void switchMuxPin(int mux, int pin)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	6039      	str	r1, [r7, #0]
	switch (pin){
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	2b07      	cmp	r3, #7
 8000daa:	f200 817b 	bhi.w	80010a4 <switchMuxPin+0x308>
 8000dae:	a201      	add	r2, pc, #4	; (adr r2, 8000db4 <switchMuxPin+0x18>)
 8000db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000db4:	08000dd5 	.word	0x08000dd5
 8000db8:	08000e2f 	.word	0x08000e2f
 8000dbc:	08000e89 	.word	0x08000e89
 8000dc0:	08000ee3 	.word	0x08000ee3
 8000dc4:	08000f3d 	.word	0x08000f3d
 8000dc8:	08000f97 	.word	0x08000f97
 8000dcc:	08000ff1 	.word	0x08000ff1
 8000dd0:	0800104b 	.word	0x0800104b
	case 0:
		HAL_GPIO_WritePin(SELECT_PINS_PORT, MUX_SELECT_PINS[mux][0], GPIO_PIN_RESET);
 8000dd4:	49b5      	ldr	r1, [pc, #724]	; (80010ac <switchMuxPin+0x310>)
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	4613      	mov	r3, r2
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	4413      	add	r3, r2
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	440b      	add	r3, r1
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	b29b      	uxth	r3, r3
 8000de6:	2200      	movs	r2, #0
 8000de8:	4619      	mov	r1, r3
 8000dea:	48b1      	ldr	r0, [pc, #708]	; (80010b0 <switchMuxPin+0x314>)
 8000dec:	f001 fc52 	bl	8002694 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SELECT_PINS_PORT, MUX_SELECT_PINS[mux][1], GPIO_PIN_RESET);
 8000df0:	49ae      	ldr	r1, [pc, #696]	; (80010ac <switchMuxPin+0x310>)
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	4613      	mov	r3, r2
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	4413      	add	r3, r2
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	440b      	add	r3, r1
 8000dfe:	3304      	adds	r3, #4
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	2200      	movs	r2, #0
 8000e06:	4619      	mov	r1, r3
 8000e08:	48a9      	ldr	r0, [pc, #676]	; (80010b0 <switchMuxPin+0x314>)
 8000e0a:	f001 fc43 	bl	8002694 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SELECT_PINS_PORT, MUX_SELECT_PINS[mux][2], GPIO_PIN_RESET);
 8000e0e:	49a7      	ldr	r1, [pc, #668]	; (80010ac <switchMuxPin+0x310>)
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	4613      	mov	r3, r2
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	4413      	add	r3, r2
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	440b      	add	r3, r1
 8000e1c:	3308      	adds	r3, #8
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	b29b      	uxth	r3, r3
 8000e22:	2200      	movs	r2, #0
 8000e24:	4619      	mov	r1, r3
 8000e26:	48a2      	ldr	r0, [pc, #648]	; (80010b0 <switchMuxPin+0x314>)
 8000e28:	f001 fc34 	bl	8002694 <HAL_GPIO_WritePin>
		break;
 8000e2c:	e13a      	b.n	80010a4 <switchMuxPin+0x308>
	case 1:
		HAL_GPIO_WritePin(SELECT_PINS_PORT, MUX_SELECT_PINS[mux][0], GPIO_PIN_SET);
 8000e2e:	499f      	ldr	r1, [pc, #636]	; (80010ac <switchMuxPin+0x310>)
 8000e30:	687a      	ldr	r2, [r7, #4]
 8000e32:	4613      	mov	r3, r2
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	4413      	add	r3, r2
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	440b      	add	r3, r1
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	2201      	movs	r2, #1
 8000e42:	4619      	mov	r1, r3
 8000e44:	489a      	ldr	r0, [pc, #616]	; (80010b0 <switchMuxPin+0x314>)
 8000e46:	f001 fc25 	bl	8002694 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SELECT_PINS_PORT, MUX_SELECT_PINS[mux][1], GPIO_PIN_RESET);
 8000e4a:	4998      	ldr	r1, [pc, #608]	; (80010ac <switchMuxPin+0x310>)
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	4613      	mov	r3, r2
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	4413      	add	r3, r2
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	440b      	add	r3, r1
 8000e58:	3304      	adds	r3, #4
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	2200      	movs	r2, #0
 8000e60:	4619      	mov	r1, r3
 8000e62:	4893      	ldr	r0, [pc, #588]	; (80010b0 <switchMuxPin+0x314>)
 8000e64:	f001 fc16 	bl	8002694 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SELECT_PINS_PORT, MUX_SELECT_PINS[mux][2], GPIO_PIN_RESET);
 8000e68:	4990      	ldr	r1, [pc, #576]	; (80010ac <switchMuxPin+0x310>)
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	4413      	add	r3, r2
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	440b      	add	r3, r1
 8000e76:	3308      	adds	r3, #8
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	4619      	mov	r1, r3
 8000e80:	488b      	ldr	r0, [pc, #556]	; (80010b0 <switchMuxPin+0x314>)
 8000e82:	f001 fc07 	bl	8002694 <HAL_GPIO_WritePin>
		break;
 8000e86:	e10d      	b.n	80010a4 <switchMuxPin+0x308>
	case 2:
		HAL_GPIO_WritePin(SELECT_PINS_PORT, MUX_SELECT_PINS[mux][0], GPIO_PIN_RESET);
 8000e88:	4988      	ldr	r1, [pc, #544]	; (80010ac <switchMuxPin+0x310>)
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	4413      	add	r3, r2
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	440b      	add	r3, r1
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4884      	ldr	r0, [pc, #528]	; (80010b0 <switchMuxPin+0x314>)
 8000ea0:	f001 fbf8 	bl	8002694 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SELECT_PINS_PORT, MUX_SELECT_PINS[mux][1], GPIO_PIN_SET);
 8000ea4:	4981      	ldr	r1, [pc, #516]	; (80010ac <switchMuxPin+0x310>)
 8000ea6:	687a      	ldr	r2, [r7, #4]
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	4413      	add	r3, r2
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	440b      	add	r3, r1
 8000eb2:	3304      	adds	r3, #4
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	2201      	movs	r2, #1
 8000eba:	4619      	mov	r1, r3
 8000ebc:	487c      	ldr	r0, [pc, #496]	; (80010b0 <switchMuxPin+0x314>)
 8000ebe:	f001 fbe9 	bl	8002694 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SELECT_PINS_PORT, MUX_SELECT_PINS[mux][2], GPIO_PIN_RESET);
 8000ec2:	497a      	ldr	r1, [pc, #488]	; (80010ac <switchMuxPin+0x310>)
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	4413      	add	r3, r2
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	440b      	add	r3, r1
 8000ed0:	3308      	adds	r3, #8
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	b29b      	uxth	r3, r3
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4875      	ldr	r0, [pc, #468]	; (80010b0 <switchMuxPin+0x314>)
 8000edc:	f001 fbda 	bl	8002694 <HAL_GPIO_WritePin>
		break;
 8000ee0:	e0e0      	b.n	80010a4 <switchMuxPin+0x308>
	case 3:
		HAL_GPIO_WritePin(SELECT_PINS_PORT, MUX_SELECT_PINS[mux][0], GPIO_PIN_SET);
 8000ee2:	4972      	ldr	r1, [pc, #456]	; (80010ac <switchMuxPin+0x310>)
 8000ee4:	687a      	ldr	r2, [r7, #4]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	4413      	add	r3, r2
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	440b      	add	r3, r1
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	486d      	ldr	r0, [pc, #436]	; (80010b0 <switchMuxPin+0x314>)
 8000efa:	f001 fbcb 	bl	8002694 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SELECT_PINS_PORT, MUX_SELECT_PINS[mux][1], GPIO_PIN_SET);
 8000efe:	496b      	ldr	r1, [pc, #428]	; (80010ac <switchMuxPin+0x310>)
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	4613      	mov	r3, r2
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	4413      	add	r3, r2
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	440b      	add	r3, r1
 8000f0c:	3304      	adds	r3, #4
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	b29b      	uxth	r3, r3
 8000f12:	2201      	movs	r2, #1
 8000f14:	4619      	mov	r1, r3
 8000f16:	4866      	ldr	r0, [pc, #408]	; (80010b0 <switchMuxPin+0x314>)
 8000f18:	f001 fbbc 	bl	8002694 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SELECT_PINS_PORT, MUX_SELECT_PINS[mux][2], GPIO_PIN_RESET);
 8000f1c:	4963      	ldr	r1, [pc, #396]	; (80010ac <switchMuxPin+0x310>)
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	4613      	mov	r3, r2
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	4413      	add	r3, r2
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	440b      	add	r3, r1
 8000f2a:	3308      	adds	r3, #8
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	2200      	movs	r2, #0
 8000f32:	4619      	mov	r1, r3
 8000f34:	485e      	ldr	r0, [pc, #376]	; (80010b0 <switchMuxPin+0x314>)
 8000f36:	f001 fbad 	bl	8002694 <HAL_GPIO_WritePin>
		break;
 8000f3a:	e0b3      	b.n	80010a4 <switchMuxPin+0x308>
	case 4:
		HAL_GPIO_WritePin(SELECT_PINS_PORT, MUX_SELECT_PINS[mux][0], GPIO_PIN_RESET);
 8000f3c:	495b      	ldr	r1, [pc, #364]	; (80010ac <switchMuxPin+0x310>)
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	4613      	mov	r3, r2
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	4413      	add	r3, r2
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	440b      	add	r3, r1
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	2200      	movs	r2, #0
 8000f50:	4619      	mov	r1, r3
 8000f52:	4857      	ldr	r0, [pc, #348]	; (80010b0 <switchMuxPin+0x314>)
 8000f54:	f001 fb9e 	bl	8002694 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SELECT_PINS_PORT, MUX_SELECT_PINS[mux][1], GPIO_PIN_RESET);
 8000f58:	4954      	ldr	r1, [pc, #336]	; (80010ac <switchMuxPin+0x310>)
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	4413      	add	r3, r2
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	440b      	add	r3, r1
 8000f66:	3304      	adds	r3, #4
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	4619      	mov	r1, r3
 8000f70:	484f      	ldr	r0, [pc, #316]	; (80010b0 <switchMuxPin+0x314>)
 8000f72:	f001 fb8f 	bl	8002694 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SELECT_PINS_PORT, MUX_SELECT_PINS[mux][2], GPIO_PIN_SET);
 8000f76:	494d      	ldr	r1, [pc, #308]	; (80010ac <switchMuxPin+0x310>)
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	4413      	add	r3, r2
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	440b      	add	r3, r1
 8000f84:	3308      	adds	r3, #8
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4848      	ldr	r0, [pc, #288]	; (80010b0 <switchMuxPin+0x314>)
 8000f90:	f001 fb80 	bl	8002694 <HAL_GPIO_WritePin>
		break;
 8000f94:	e086      	b.n	80010a4 <switchMuxPin+0x308>
	case 5:
		HAL_GPIO_WritePin(SELECT_PINS_PORT, MUX_SELECT_PINS[mux][0], GPIO_PIN_SET);
 8000f96:	4945      	ldr	r1, [pc, #276]	; (80010ac <switchMuxPin+0x310>)
 8000f98:	687a      	ldr	r2, [r7, #4]
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	4413      	add	r3, r2
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	440b      	add	r3, r1
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	2201      	movs	r2, #1
 8000faa:	4619      	mov	r1, r3
 8000fac:	4840      	ldr	r0, [pc, #256]	; (80010b0 <switchMuxPin+0x314>)
 8000fae:	f001 fb71 	bl	8002694 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SELECT_PINS_PORT, MUX_SELECT_PINS[mux][1], GPIO_PIN_RESET);
 8000fb2:	493e      	ldr	r1, [pc, #248]	; (80010ac <switchMuxPin+0x310>)
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	4413      	add	r3, r2
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	440b      	add	r3, r1
 8000fc0:	3304      	adds	r3, #4
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	b29b      	uxth	r3, r3
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4839      	ldr	r0, [pc, #228]	; (80010b0 <switchMuxPin+0x314>)
 8000fcc:	f001 fb62 	bl	8002694 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SELECT_PINS_PORT, MUX_SELECT_PINS[mux][2], GPIO_PIN_SET);
 8000fd0:	4936      	ldr	r1, [pc, #216]	; (80010ac <switchMuxPin+0x310>)
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	4413      	add	r3, r2
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	440b      	add	r3, r1
 8000fde:	3308      	adds	r3, #8
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4831      	ldr	r0, [pc, #196]	; (80010b0 <switchMuxPin+0x314>)
 8000fea:	f001 fb53 	bl	8002694 <HAL_GPIO_WritePin>
		break;
 8000fee:	e059      	b.n	80010a4 <switchMuxPin+0x308>
	case 6:
		HAL_GPIO_WritePin(SELECT_PINS_PORT, MUX_SELECT_PINS[mux][0], GPIO_PIN_RESET);
 8000ff0:	492e      	ldr	r1, [pc, #184]	; (80010ac <switchMuxPin+0x310>)
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	4413      	add	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	440b      	add	r3, r1
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	b29b      	uxth	r3, r3
 8001002:	2200      	movs	r2, #0
 8001004:	4619      	mov	r1, r3
 8001006:	482a      	ldr	r0, [pc, #168]	; (80010b0 <switchMuxPin+0x314>)
 8001008:	f001 fb44 	bl	8002694 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SELECT_PINS_PORT, MUX_SELECT_PINS[mux][1], GPIO_PIN_SET);
 800100c:	4927      	ldr	r1, [pc, #156]	; (80010ac <switchMuxPin+0x310>)
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	4613      	mov	r3, r2
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	4413      	add	r3, r2
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	440b      	add	r3, r1
 800101a:	3304      	adds	r3, #4
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	b29b      	uxth	r3, r3
 8001020:	2201      	movs	r2, #1
 8001022:	4619      	mov	r1, r3
 8001024:	4822      	ldr	r0, [pc, #136]	; (80010b0 <switchMuxPin+0x314>)
 8001026:	f001 fb35 	bl	8002694 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SELECT_PINS_PORT, MUX_SELECT_PINS[mux][2], GPIO_PIN_SET);
 800102a:	4920      	ldr	r1, [pc, #128]	; (80010ac <switchMuxPin+0x310>)
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	4613      	mov	r3, r2
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	4413      	add	r3, r2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	440b      	add	r3, r1
 8001038:	3308      	adds	r3, #8
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	b29b      	uxth	r3, r3
 800103e:	2201      	movs	r2, #1
 8001040:	4619      	mov	r1, r3
 8001042:	481b      	ldr	r0, [pc, #108]	; (80010b0 <switchMuxPin+0x314>)
 8001044:	f001 fb26 	bl	8002694 <HAL_GPIO_WritePin>
		break;
 8001048:	e02c      	b.n	80010a4 <switchMuxPin+0x308>
	case 7:
		HAL_GPIO_WritePin(SELECT_PINS_PORT, MUX_SELECT_PINS[mux][0], GPIO_PIN_SET);
 800104a:	4918      	ldr	r1, [pc, #96]	; (80010ac <switchMuxPin+0x310>)
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	4613      	mov	r3, r2
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	4413      	add	r3, r2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	440b      	add	r3, r1
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	b29b      	uxth	r3, r3
 800105c:	2201      	movs	r2, #1
 800105e:	4619      	mov	r1, r3
 8001060:	4813      	ldr	r0, [pc, #76]	; (80010b0 <switchMuxPin+0x314>)
 8001062:	f001 fb17 	bl	8002694 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SELECT_PINS_PORT, MUX_SELECT_PINS[mux][1], GPIO_PIN_SET);
 8001066:	4911      	ldr	r1, [pc, #68]	; (80010ac <switchMuxPin+0x310>)
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	4613      	mov	r3, r2
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	4413      	add	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	440b      	add	r3, r1
 8001074:	3304      	adds	r3, #4
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	b29b      	uxth	r3, r3
 800107a:	2201      	movs	r2, #1
 800107c:	4619      	mov	r1, r3
 800107e:	480c      	ldr	r0, [pc, #48]	; (80010b0 <switchMuxPin+0x314>)
 8001080:	f001 fb08 	bl	8002694 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SELECT_PINS_PORT, MUX_SELECT_PINS[mux][2], GPIO_PIN_SET);
 8001084:	4909      	ldr	r1, [pc, #36]	; (80010ac <switchMuxPin+0x310>)
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	4613      	mov	r3, r2
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	4413      	add	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	440b      	add	r3, r1
 8001092:	3308      	adds	r3, #8
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	b29b      	uxth	r3, r3
 8001098:	2201      	movs	r2, #1
 800109a:	4619      	mov	r1, r3
 800109c:	4804      	ldr	r0, [pc, #16]	; (80010b0 <switchMuxPin+0x314>)
 800109e:	f001 faf9 	bl	8002694 <HAL_GPIO_WritePin>
		break;
 80010a2:	bf00      	nop
	}

}
 80010a4:	bf00      	nop
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	08003e80 	.word	0x08003e80
 80010b0:	40021000 	.word	0x40021000
 80010b4:	00000000 	.word	0x00000000

080010b8 <calculateForce>:

double calculateForce(uint16_t _analogRead, int _resistor){
 80010b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010bc:	b082      	sub	sp, #8
 80010be:	af00      	add	r7, sp, #0
 80010c0:	4603      	mov	r3, r0
 80010c2:	6039      	str	r1, [r7, #0]
 80010c4:	80fb      	strh	r3, [r7, #6]
//  convert analogRead to Volt
	voltageAOC = (double)_analogRead * (VOLT_IN / MAX_RESOLUTION_VALUE);  // 500mV max value
 80010c6:	88fb      	ldrh	r3, [r7, #6]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff f9bf 	bl	800044c <__aeabi_ui2d>
 80010ce:	4604      	mov	r4, r0
 80010d0:	460d      	mov	r5, r1
 80010d2:	f20f 09ec 	addw	r9, pc, #236	; 0xec
 80010d6:	e9d9 8900 	ldrd	r8, r9, [r9]
 80010da:	f640 73ff 	movw	r3, #4095	; 0xfff
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff f9c4 	bl	800046c <__aeabi_i2d>
 80010e4:	4602      	mov	r2, r0
 80010e6:	460b      	mov	r3, r1
 80010e8:	4640      	mov	r0, r8
 80010ea:	4649      	mov	r1, r9
 80010ec:	f7ff fb52 	bl	8000794 <__aeabi_ddiv>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	4620      	mov	r0, r4
 80010f6:	4629      	mov	r1, r5
 80010f8:	f7ff fa22 	bl	8000540 <__aeabi_dmul>
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	4937      	ldr	r1, [pc, #220]	; (80011e0 <calculateForce+0x128>)
 8001102:	e9c1 2300 	strd	r2, r3, [r1]
	current = voltageAOC / _resistor;
 8001106:	4b36      	ldr	r3, [pc, #216]	; (80011e0 <calculateForce+0x128>)
 8001108:	e9d3 4500 	ldrd	r4, r5, [r3]
 800110c:	6838      	ldr	r0, [r7, #0]
 800110e:	f7ff f9ad 	bl	800046c <__aeabi_i2d>
 8001112:	4602      	mov	r2, r0
 8001114:	460b      	mov	r3, r1
 8001116:	4620      	mov	r0, r4
 8001118:	4629      	mov	r1, r5
 800111a:	f7ff fb3b 	bl	8000794 <__aeabi_ddiv>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	4930      	ldr	r1, [pc, #192]	; (80011e4 <calculateForce+0x12c>)
 8001124:	e9c1 2300 	strd	r2, r3, [r1]
	sensorResistance = (VOLT_IN / current) - _resistor;
 8001128:	a125      	add	r1, pc, #148	; (adr r1, 80011c0 <calculateForce+0x108>)
 800112a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800112e:	4b2d      	ldr	r3, [pc, #180]	; (80011e4 <calculateForce+0x12c>)
 8001130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001134:	f7ff fb2e 	bl	8000794 <__aeabi_ddiv>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	4614      	mov	r4, r2
 800113e:	461d      	mov	r5, r3
 8001140:	6838      	ldr	r0, [r7, #0]
 8001142:	f7ff f993 	bl	800046c <__aeabi_i2d>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	4620      	mov	r0, r4
 800114c:	4629      	mov	r1, r5
 800114e:	f7ff f83f 	bl	80001d0 <__aeabi_dsub>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	4924      	ldr	r1, [pc, #144]	; (80011e8 <calculateForce+0x130>)
 8001158:	e9c1 2300 	strd	r2, r3, [r1]
	conductance = 1000000 / sensorResistance;
 800115c:	4b22      	ldr	r3, [pc, #136]	; (80011e8 <calculateForce+0x130>)
 800115e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001162:	a119      	add	r1, pc, #100	; (adr r1, 80011c8 <calculateForce+0x110>)
 8001164:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001168:	f7ff fb14 	bl	8000794 <__aeabi_ddiv>
 800116c:	4602      	mov	r2, r0
 800116e:	460b      	mov	r3, r1
 8001170:	491e      	ldr	r1, [pc, #120]	; (80011ec <calculateForce+0x134>)
 8001172:	e9c1 2300 	strd	r2, r3, [r1]

//	TODO [g] -> [N] and send this value via ros pkg, max 0.1 resolution
//	TODO CONVERT TO NEWTONS
	return A * pow(conductance, B);
 8001176:	4b1d      	ldr	r3, [pc, #116]	; (80011ec <calculateForce+0x134>)
 8001178:	ed93 7b00 	vldr	d7, [r3]
 800117c:	ed9f 6b14 	vldr	d6, [pc, #80]	; 80011d0 <calculateForce+0x118>
 8001180:	eeb0 1a46 	vmov.f32	s2, s12
 8001184:	eef0 1a66 	vmov.f32	s3, s13
 8001188:	eeb0 0a47 	vmov.f32	s0, s14
 800118c:	eef0 0a67 	vmov.f32	s1, s15
 8001190:	f001 ff30 	bl	8002ff4 <pow>
 8001194:	ec51 0b10 	vmov	r0, r1, d0
 8001198:	a30f      	add	r3, pc, #60	; (adr r3, 80011d8 <calculateForce+0x120>)
 800119a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119e:	f7ff f9cf 	bl	8000540 <__aeabi_dmul>
 80011a2:	4602      	mov	r2, r0
 80011a4:	460b      	mov	r3, r1
 80011a6:	ec43 2b17 	vmov	d7, r2, r3
}
 80011aa:	eeb0 0a47 	vmov.f32	s0, s14
 80011ae:	eef0 0a67 	vmov.f32	s1, s15
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80011ba:	bf00      	nop
 80011bc:	f3af 8000 	nop.w
 80011c0:	9999999a 	.word	0x9999999a
 80011c4:	40079999 	.word	0x40079999
 80011c8:	00000000 	.word	0x00000000
 80011cc:	412e8480 	.word	0x412e8480
 80011d0:	19e33c68 	.word	0x19e33c68
 80011d4:	3ff678cf 	.word	0x3ff678cf
 80011d8:	f2e04a5e 	.word	0xf2e04a5e
 80011dc:	3fcbabd6 	.word	0x3fcbabd6
 80011e0:	200000d8 	.word	0x200000d8
 80011e4:	200000e0 	.word	0x200000e0
 80011e8:	200000e8 	.word	0x200000e8
 80011ec:	200000f0 	.word	0x200000f0

080011f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011f6:	f000 fb35 	bl	8001864 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011fa:	f000 f83f 	bl	800127c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011fe:	f000 f8f9 	bl	80013f4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001202:	f000 f8a5 	bl	8001350 <MX_ADC1_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

//	  MULTIPLEXER 1
	  for (int i=0; i<8; i++)
 8001206:	2300      	movs	r3, #0
 8001208:	607b      	str	r3, [r7, #4]
 800120a:	e02a      	b.n	8001262 <main+0x72>
	  {
		  switchMuxPin(MUX1, 0);
 800120c:	2300      	movs	r3, #0
 800120e:	2100      	movs	r1, #0
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff fdc3 	bl	8000d9c <switchMuxPin>

		  HAL_ADC_Start(&hadc1); // start the ADC
 8001216:	4816      	ldr	r0, [pc, #88]	; (8001270 <main+0x80>)
 8001218:	f000 fbfe 	bl	8001a18 <HAL_ADC_Start>

		  if(HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)  // poll for conversion
 800121c:	210a      	movs	r1, #10
 800121e:	4814      	ldr	r0, [pc, #80]	; (8001270 <main+0x80>)
 8001220:	f000 fcff 	bl	8001c22 <HAL_ADC_PollForConversion>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d106      	bne.n	8001238 <main+0x48>
			  {
			  analogRead = HAL_ADC_GetValue(&hadc1);
 800122a:	4811      	ldr	r0, [pc, #68]	; (8001270 <main+0x80>)
 800122c:	f000 fd84 	bl	8001d38 <HAL_ADC_GetValue>
 8001230:	4603      	mov	r3, r0
 8001232:	b29a      	uxth	r2, r3
 8001234:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <main+0x84>)
 8001236:	801a      	strh	r2, [r3, #0]
			  }

		  HAL_ADC_Stop(&hadc1);
 8001238:	480d      	ldr	r0, [pc, #52]	; (8001270 <main+0x80>)
 800123a:	f000 fcbf 	bl	8001bbc <HAL_ADC_Stop>

		  forceArray[0] = calculateForce(analogRead, RESISTOR_47);
 800123e:	4b0d      	ldr	r3, [pc, #52]	; (8001274 <main+0x84>)
 8001240:	881b      	ldrh	r3, [r3, #0]
 8001242:	f241 225c 	movw	r2, #4700	; 0x125c
 8001246:	4611      	mov	r1, r2
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff ff35 	bl	80010b8 <calculateForce>
 800124e:	eeb0 7a40 	vmov.f32	s14, s0
 8001252:	eef0 7a60 	vmov.f32	s15, s1
 8001256:	4b08      	ldr	r3, [pc, #32]	; (8001278 <main+0x88>)
 8001258:	ed83 7b00 	vstr	d7, [r3]
	  for (int i=0; i<8; i++)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3301      	adds	r3, #1
 8001260:	607b      	str	r3, [r7, #4]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2b07      	cmp	r3, #7
 8001266:	ddd1      	ble.n	800120c <main+0x1c>
//	  MULTIPLEXER 2


//	  MULTIPLEXER 3

	  HAL_Delay(100);
 8001268:	2064      	movs	r0, #100	; 0x64
 800126a:	f000 fb6d 	bl	8001948 <HAL_Delay>
	  for (int i=0; i<8; i++)
 800126e:	e7ca      	b.n	8001206 <main+0x16>
 8001270:	2000008c 	.word	0x2000008c
 8001274:	200000d4 	.word	0x200000d4
 8001278:	200000f8 	.word	0x200000f8

0800127c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b094      	sub	sp, #80	; 0x50
 8001280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001282:	f107 0320 	add.w	r3, r7, #32
 8001286:	2230      	movs	r2, #48	; 0x30
 8001288:	2100      	movs	r1, #0
 800128a:	4618      	mov	r0, r3
 800128c:	f001 fe80 	bl	8002f90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001290:	f107 030c 	add.w	r3, r7, #12
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a0:	2300      	movs	r3, #0
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	4b28      	ldr	r3, [pc, #160]	; (8001348 <SystemClock_Config+0xcc>)
 80012a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a8:	4a27      	ldr	r2, [pc, #156]	; (8001348 <SystemClock_Config+0xcc>)
 80012aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ae:	6413      	str	r3, [r2, #64]	; 0x40
 80012b0:	4b25      	ldr	r3, [pc, #148]	; (8001348 <SystemClock_Config+0xcc>)
 80012b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012bc:	2300      	movs	r3, #0
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	4b22      	ldr	r3, [pc, #136]	; (800134c <SystemClock_Config+0xd0>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a21      	ldr	r2, [pc, #132]	; (800134c <SystemClock_Config+0xd0>)
 80012c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ca:	6013      	str	r3, [r2, #0]
 80012cc:	4b1f      	ldr	r3, [pc, #124]	; (800134c <SystemClock_Config+0xd0>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012d4:	607b      	str	r3, [r7, #4]
 80012d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012d8:	2301      	movs	r3, #1
 80012da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012e2:	2302      	movs	r3, #2
 80012e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012ec:	2304      	movs	r3, #4
 80012ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80012f0:	23a8      	movs	r3, #168	; 0xa8
 80012f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012f4:	2302      	movs	r3, #2
 80012f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80012f8:	2307      	movs	r3, #7
 80012fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012fc:	f107 0320 	add.w	r3, r7, #32
 8001300:	4618      	mov	r0, r3
 8001302:	f001 f9e1 	bl	80026c8 <HAL_RCC_OscConfig>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800130c:	f000 f9d2 	bl	80016b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001310:	230f      	movs	r3, #15
 8001312:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001314:	2302      	movs	r3, #2
 8001316:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800131c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001320:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001322:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001326:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001328:	f107 030c 	add.w	r3, r7, #12
 800132c:	2105      	movs	r1, #5
 800132e:	4618      	mov	r0, r3
 8001330:	f001 fc42 	bl	8002bb8 <HAL_RCC_ClockConfig>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800133a:	f000 f9bb 	bl	80016b4 <Error_Handler>
  }
}
 800133e:	bf00      	nop
 8001340:	3750      	adds	r7, #80	; 0x50
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40023800 	.word	0x40023800
 800134c:	40007000 	.word	0x40007000

08001350 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001356:	463b      	mov	r3, r7
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001362:	4b21      	ldr	r3, [pc, #132]	; (80013e8 <MX_ADC1_Init+0x98>)
 8001364:	4a21      	ldr	r2, [pc, #132]	; (80013ec <MX_ADC1_Init+0x9c>)
 8001366:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001368:	4b1f      	ldr	r3, [pc, #124]	; (80013e8 <MX_ADC1_Init+0x98>)
 800136a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800136e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001370:	4b1d      	ldr	r3, [pc, #116]	; (80013e8 <MX_ADC1_Init+0x98>)
 8001372:	2200      	movs	r2, #0
 8001374:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001376:	4b1c      	ldr	r3, [pc, #112]	; (80013e8 <MX_ADC1_Init+0x98>)
 8001378:	2200      	movs	r2, #0
 800137a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800137c:	4b1a      	ldr	r3, [pc, #104]	; (80013e8 <MX_ADC1_Init+0x98>)
 800137e:	2200      	movs	r2, #0
 8001380:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001382:	4b19      	ldr	r3, [pc, #100]	; (80013e8 <MX_ADC1_Init+0x98>)
 8001384:	2200      	movs	r2, #0
 8001386:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800138a:	4b17      	ldr	r3, [pc, #92]	; (80013e8 <MX_ADC1_Init+0x98>)
 800138c:	2200      	movs	r2, #0
 800138e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001390:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <MX_ADC1_Init+0x98>)
 8001392:	4a17      	ldr	r2, [pc, #92]	; (80013f0 <MX_ADC1_Init+0xa0>)
 8001394:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001396:	4b14      	ldr	r3, [pc, #80]	; (80013e8 <MX_ADC1_Init+0x98>)
 8001398:	2200      	movs	r2, #0
 800139a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800139c:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <MX_ADC1_Init+0x98>)
 800139e:	2201      	movs	r2, #1
 80013a0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013a2:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <MX_ADC1_Init+0x98>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013aa:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <MX_ADC1_Init+0x98>)
 80013ac:	2201      	movs	r2, #1
 80013ae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013b0:	480d      	ldr	r0, [pc, #52]	; (80013e8 <MX_ADC1_Init+0x98>)
 80013b2:	f000 faed 	bl	8001990 <HAL_ADC_Init>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80013bc:	f000 f97a 	bl	80016b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80013c0:	230c      	movs	r3, #12
 80013c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80013c4:	2301      	movs	r3, #1
 80013c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80013c8:	2300      	movs	r3, #0
 80013ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013cc:	463b      	mov	r3, r7
 80013ce:	4619      	mov	r1, r3
 80013d0:	4805      	ldr	r0, [pc, #20]	; (80013e8 <MX_ADC1_Init+0x98>)
 80013d2:	f000 fcbf 	bl	8001d54 <HAL_ADC_ConfigChannel>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80013dc:	f000 f96a 	bl	80016b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013e0:	bf00      	nop
 80013e2:	3710      	adds	r7, #16
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	2000008c 	.word	0x2000008c
 80013ec:	40012000 	.word	0x40012000
 80013f0:	0f000001 	.word	0x0f000001

080013f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08c      	sub	sp, #48	; 0x30
 80013f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fa:	f107 031c 	add.w	r3, r7, #28
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]
 8001406:	60da      	str	r2, [r3, #12]
 8001408:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	61bb      	str	r3, [r7, #24]
 800140e:	4ba3      	ldr	r3, [pc, #652]	; (800169c <MX_GPIO_Init+0x2a8>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	4aa2      	ldr	r2, [pc, #648]	; (800169c <MX_GPIO_Init+0x2a8>)
 8001414:	f043 0310 	orr.w	r3, r3, #16
 8001418:	6313      	str	r3, [r2, #48]	; 0x30
 800141a:	4ba0      	ldr	r3, [pc, #640]	; (800169c <MX_GPIO_Init+0x2a8>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	f003 0310 	and.w	r3, r3, #16
 8001422:	61bb      	str	r3, [r7, #24]
 8001424:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	617b      	str	r3, [r7, #20]
 800142a:	4b9c      	ldr	r3, [pc, #624]	; (800169c <MX_GPIO_Init+0x2a8>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	4a9b      	ldr	r2, [pc, #620]	; (800169c <MX_GPIO_Init+0x2a8>)
 8001430:	f043 0304 	orr.w	r3, r3, #4
 8001434:	6313      	str	r3, [r2, #48]	; 0x30
 8001436:	4b99      	ldr	r3, [pc, #612]	; (800169c <MX_GPIO_Init+0x2a8>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	f003 0304 	and.w	r3, r3, #4
 800143e:	617b      	str	r3, [r7, #20]
 8001440:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	4b95      	ldr	r3, [pc, #596]	; (800169c <MX_GPIO_Init+0x2a8>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a94      	ldr	r2, [pc, #592]	; (800169c <MX_GPIO_Init+0x2a8>)
 800144c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b92      	ldr	r3, [pc, #584]	; (800169c <MX_GPIO_Init+0x2a8>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800145a:	613b      	str	r3, [r7, #16]
 800145c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	4b8e      	ldr	r3, [pc, #568]	; (800169c <MX_GPIO_Init+0x2a8>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a8d      	ldr	r2, [pc, #564]	; (800169c <MX_GPIO_Init+0x2a8>)
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b8b      	ldr	r3, [pc, #556]	; (800169c <MX_GPIO_Init+0x2a8>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	4b87      	ldr	r3, [pc, #540]	; (800169c <MX_GPIO_Init+0x2a8>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a86      	ldr	r2, [pc, #536]	; (800169c <MX_GPIO_Init+0x2a8>)
 8001484:	f043 0302 	orr.w	r3, r3, #2
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b84      	ldr	r3, [pc, #528]	; (800169c <MX_GPIO_Init+0x2a8>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	607b      	str	r3, [r7, #4]
 800149a:	4b80      	ldr	r3, [pc, #512]	; (800169c <MX_GPIO_Init+0x2a8>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a7f      	ldr	r2, [pc, #508]	; (800169c <MX_GPIO_Init+0x2a8>)
 80014a0:	f043 0308 	orr.w	r3, r3, #8
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b7d      	ldr	r3, [pc, #500]	; (800169c <MX_GPIO_Init+0x2a8>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0308 	and.w	r3, r3, #8
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|M1_S0_Pin|M1_S1_Pin|M1_S2_Pin
 80014b2:	2200      	movs	r2, #0
 80014b4:	f64f 7188 	movw	r1, #65416	; 0xff88
 80014b8:	4879      	ldr	r0, [pc, #484]	; (80016a0 <MX_GPIO_Init+0x2ac>)
 80014ba:	f001 f8eb 	bl	8002694 <HAL_GPIO_WritePin>
                          |M2_S0_Pin|M2_S1_Pin|M2_S2_Pin|M3_S0_Pin
                          |M3_S1_Pin|M3_S2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80014be:	2201      	movs	r2, #1
 80014c0:	2101      	movs	r1, #1
 80014c2:	4878      	ldr	r0, [pc, #480]	; (80016a4 <MX_GPIO_Init+0x2b0>)
 80014c4:	f001 f8e6 	bl	8002694 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80014c8:	2200      	movs	r2, #0
 80014ca:	f24f 0110 	movw	r1, #61456	; 0xf010
 80014ce:	4876      	ldr	r0, [pc, #472]	; (80016a8 <MX_GPIO_Init+0x2b4>)
 80014d0:	f001 f8e0 	bl	8002694 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin M1_S0_Pin M1_S1_Pin M1_S2_Pin
                           M2_S0_Pin M2_S1_Pin M2_S2_Pin M3_S0_Pin
                           M3_S1_Pin M3_S2_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|M1_S0_Pin|M1_S1_Pin|M1_S2_Pin
 80014d4:	f64f 7388 	movw	r3, #65416	; 0xff88
 80014d8:	61fb      	str	r3, [r7, #28]
                          |M2_S0_Pin|M2_S1_Pin|M2_S2_Pin|M3_S0_Pin
                          |M3_S1_Pin|M3_S2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014da:	2301      	movs	r3, #1
 80014dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e2:	2300      	movs	r3, #0
 80014e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014e6:	f107 031c 	add.w	r3, r7, #28
 80014ea:	4619      	mov	r1, r3
 80014ec:	486c      	ldr	r0, [pc, #432]	; (80016a0 <MX_GPIO_Init+0x2ac>)
 80014ee:	f000 ff35 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80014f2:	2301      	movs	r3, #1
 80014f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f6:	2301      	movs	r3, #1
 80014f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fe:	2300      	movs	r3, #0
 8001500:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001502:	f107 031c 	add.w	r3, r7, #28
 8001506:	4619      	mov	r1, r3
 8001508:	4866      	ldr	r0, [pc, #408]	; (80016a4 <MX_GPIO_Init+0x2b0>)
 800150a:	f000 ff27 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800150e:	2308      	movs	r3, #8
 8001510:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001512:	2302      	movs	r3, #2
 8001514:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151a:	2300      	movs	r3, #0
 800151c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800151e:	2305      	movs	r3, #5
 8001520:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001522:	f107 031c 	add.w	r3, r7, #28
 8001526:	4619      	mov	r1, r3
 8001528:	485e      	ldr	r0, [pc, #376]	; (80016a4 <MX_GPIO_Init+0x2b0>)
 800152a:	f000 ff17 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800152e:	2301      	movs	r3, #1
 8001530:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001532:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001536:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800153c:	f107 031c 	add.w	r3, r7, #28
 8001540:	4619      	mov	r1, r3
 8001542:	485a      	ldr	r0, [pc, #360]	; (80016ac <MX_GPIO_Init+0x2b8>)
 8001544:	f000 ff0a 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001548:	2310      	movs	r3, #16
 800154a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154c:	2302      	movs	r3, #2
 800154e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001554:	2300      	movs	r3, #0
 8001556:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001558:	2306      	movs	r3, #6
 800155a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800155c:	f107 031c 	add.w	r3, r7, #28
 8001560:	4619      	mov	r1, r3
 8001562:	4852      	ldr	r0, [pc, #328]	; (80016ac <MX_GPIO_Init+0x2b8>)
 8001564:	f000 fefa 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001568:	23e0      	movs	r3, #224	; 0xe0
 800156a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156c:	2302      	movs	r3, #2
 800156e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001574:	2300      	movs	r3, #0
 8001576:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001578:	2305      	movs	r3, #5
 800157a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157c:	f107 031c 	add.w	r3, r7, #28
 8001580:	4619      	mov	r1, r3
 8001582:	484a      	ldr	r0, [pc, #296]	; (80016ac <MX_GPIO_Init+0x2b8>)
 8001584:	f000 feea 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001588:	2304      	movs	r3, #4
 800158a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800158c:	2300      	movs	r3, #0
 800158e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001594:	f107 031c 	add.w	r3, r7, #28
 8001598:	4619      	mov	r1, r3
 800159a:	4845      	ldr	r0, [pc, #276]	; (80016b0 <MX_GPIO_Init+0x2bc>)
 800159c:	f000 fede 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80015a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a6:	2302      	movs	r3, #2
 80015a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ae:	2300      	movs	r3, #0
 80015b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015b2:	2305      	movs	r3, #5
 80015b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80015b6:	f107 031c 	add.w	r3, r7, #28
 80015ba:	4619      	mov	r1, r3
 80015bc:	483c      	ldr	r0, [pc, #240]	; (80016b0 <MX_GPIO_Init+0x2bc>)
 80015be:	f000 fecd 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80015c2:	f24f 0310 	movw	r3, #61456	; 0xf010
 80015c6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c8:	2301      	movs	r3, #1
 80015ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d0:	2300      	movs	r3, #0
 80015d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015d4:	f107 031c 	add.w	r3, r7, #28
 80015d8:	4619      	mov	r1, r3
 80015da:	4833      	ldr	r0, [pc, #204]	; (80016a8 <MX_GPIO_Init+0x2b4>)
 80015dc:	f000 febe 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80015e0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80015e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e6:	2302      	movs	r3, #2
 80015e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ee:	2300      	movs	r3, #0
 80015f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015f2:	2306      	movs	r3, #6
 80015f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015f6:	f107 031c 	add.w	r3, r7, #28
 80015fa:	4619      	mov	r1, r3
 80015fc:	4829      	ldr	r0, [pc, #164]	; (80016a4 <MX_GPIO_Init+0x2b0>)
 80015fe:	f000 fead 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001602:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001606:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001608:	2300      	movs	r3, #0
 800160a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001610:	f107 031c 	add.w	r3, r7, #28
 8001614:	4619      	mov	r1, r3
 8001616:	4825      	ldr	r0, [pc, #148]	; (80016ac <MX_GPIO_Init+0x2b8>)
 8001618:	f000 fea0 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800161c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001620:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001622:	2302      	movs	r3, #2
 8001624:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162a:	2300      	movs	r3, #0
 800162c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800162e:	230a      	movs	r3, #10
 8001630:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001632:	f107 031c 	add.w	r3, r7, #28
 8001636:	4619      	mov	r1, r3
 8001638:	481c      	ldr	r0, [pc, #112]	; (80016ac <MX_GPIO_Init+0x2b8>)
 800163a:	f000 fe8f 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800163e:	2320      	movs	r3, #32
 8001640:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001642:	2300      	movs	r3, #0
 8001644:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800164a:	f107 031c 	add.w	r3, r7, #28
 800164e:	4619      	mov	r1, r3
 8001650:	4815      	ldr	r0, [pc, #84]	; (80016a8 <MX_GPIO_Init+0x2b4>)
 8001652:	f000 fe83 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001656:	f44f 7310 	mov.w	r3, #576	; 0x240
 800165a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800165c:	2312      	movs	r3, #18
 800165e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001664:	2300      	movs	r3, #0
 8001666:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001668:	2304      	movs	r3, #4
 800166a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166c:	f107 031c 	add.w	r3, r7, #28
 8001670:	4619      	mov	r1, r3
 8001672:	480f      	ldr	r0, [pc, #60]	; (80016b0 <MX_GPIO_Init+0x2bc>)
 8001674:	f000 fe72 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001678:	2302      	movs	r3, #2
 800167a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800167c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001680:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	2300      	movs	r3, #0
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001686:	f107 031c 	add.w	r3, r7, #28
 800168a:	4619      	mov	r1, r3
 800168c:	4804      	ldr	r0, [pc, #16]	; (80016a0 <MX_GPIO_Init+0x2ac>)
 800168e:	f000 fe65 	bl	800235c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001692:	bf00      	nop
 8001694:	3730      	adds	r7, #48	; 0x30
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40023800 	.word	0x40023800
 80016a0:	40021000 	.word	0x40021000
 80016a4:	40020800 	.word	0x40020800
 80016a8:	40020c00 	.word	0x40020c00
 80016ac:	40020000 	.word	0x40020000
 80016b0:	40020400 	.word	0x40020400

080016b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016b8:	b672      	cpsid	i
}
 80016ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016bc:	e7fe      	b.n	80016bc <Error_Handler+0x8>
	...

080016c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	607b      	str	r3, [r7, #4]
 80016ca:	4b10      	ldr	r3, [pc, #64]	; (800170c <HAL_MspInit+0x4c>)
 80016cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ce:	4a0f      	ldr	r2, [pc, #60]	; (800170c <HAL_MspInit+0x4c>)
 80016d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016d4:	6453      	str	r3, [r2, #68]	; 0x44
 80016d6:	4b0d      	ldr	r3, [pc, #52]	; (800170c <HAL_MspInit+0x4c>)
 80016d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016de:	607b      	str	r3, [r7, #4]
 80016e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	603b      	str	r3, [r7, #0]
 80016e6:	4b09      	ldr	r3, [pc, #36]	; (800170c <HAL_MspInit+0x4c>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ea:	4a08      	ldr	r2, [pc, #32]	; (800170c <HAL_MspInit+0x4c>)
 80016ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f0:	6413      	str	r3, [r2, #64]	; 0x40
 80016f2:	4b06      	ldr	r3, [pc, #24]	; (800170c <HAL_MspInit+0x4c>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fa:	603b      	str	r3, [r7, #0]
 80016fc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016fe:	2007      	movs	r0, #7
 8001700:	f000 fdf8 	bl	80022f4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001704:	bf00      	nop
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40023800 	.word	0x40023800

08001710 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b08a      	sub	sp, #40	; 0x28
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001718:	f107 0314 	add.w	r3, r7, #20
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a17      	ldr	r2, [pc, #92]	; (800178c <HAL_ADC_MspInit+0x7c>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d127      	bne.n	8001782 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	613b      	str	r3, [r7, #16]
 8001736:	4b16      	ldr	r3, [pc, #88]	; (8001790 <HAL_ADC_MspInit+0x80>)
 8001738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173a:	4a15      	ldr	r2, [pc, #84]	; (8001790 <HAL_ADC_MspInit+0x80>)
 800173c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001740:	6453      	str	r3, [r2, #68]	; 0x44
 8001742:	4b13      	ldr	r3, [pc, #76]	; (8001790 <HAL_ADC_MspInit+0x80>)
 8001744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800174a:	613b      	str	r3, [r7, #16]
 800174c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	4b0f      	ldr	r3, [pc, #60]	; (8001790 <HAL_ADC_MspInit+0x80>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	4a0e      	ldr	r2, [pc, #56]	; (8001790 <HAL_ADC_MspInit+0x80>)
 8001758:	f043 0304 	orr.w	r3, r3, #4
 800175c:	6313      	str	r3, [r2, #48]	; 0x30
 800175e:	4b0c      	ldr	r3, [pc, #48]	; (8001790 <HAL_ADC_MspInit+0x80>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	f003 0304 	and.w	r3, r3, #4
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = M1_Analog_Pin|M2_Analog_Pin|M3_Analog_Pin;
 800176a:	2334      	movs	r3, #52	; 0x34
 800176c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800176e:	2303      	movs	r3, #3
 8001770:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001776:	f107 0314 	add.w	r3, r7, #20
 800177a:	4619      	mov	r1, r3
 800177c:	4805      	ldr	r0, [pc, #20]	; (8001794 <HAL_ADC_MspInit+0x84>)
 800177e:	f000 fded 	bl	800235c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001782:	bf00      	nop
 8001784:	3728      	adds	r7, #40	; 0x28
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40012000 	.word	0x40012000
 8001790:	40023800 	.word	0x40023800
 8001794:	40020800 	.word	0x40020800

08001798 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800179c:	e7fe      	b.n	800179c <NMI_Handler+0x4>

0800179e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a2:	e7fe      	b.n	80017a2 <HardFault_Handler+0x4>

080017a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a8:	e7fe      	b.n	80017a8 <MemManage_Handler+0x4>

080017aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ae:	e7fe      	b.n	80017ae <BusFault_Handler+0x4>

080017b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b4:	e7fe      	b.n	80017b4 <UsageFault_Handler+0x4>

080017b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017e4:	f000 f890 	bl	8001908 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017e8:	bf00      	nop
 80017ea:	bd80      	pop	{r7, pc}

080017ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <SystemInit+0x20>)
 80017f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017f6:	4a05      	ldr	r2, [pc, #20]	; (800180c <SystemInit+0x20>)
 80017f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001810:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001848 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001814:	480d      	ldr	r0, [pc, #52]	; (800184c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001816:	490e      	ldr	r1, [pc, #56]	; (8001850 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001818:	4a0e      	ldr	r2, [pc, #56]	; (8001854 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800181a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800181c:	e002      	b.n	8001824 <LoopCopyDataInit>

0800181e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800181e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001820:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001822:	3304      	adds	r3, #4

08001824 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001824:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001826:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001828:	d3f9      	bcc.n	800181e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800182a:	4a0b      	ldr	r2, [pc, #44]	; (8001858 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800182c:	4c0b      	ldr	r4, [pc, #44]	; (800185c <LoopFillZerobss+0x26>)
  movs r3, #0
 800182e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001830:	e001      	b.n	8001836 <LoopFillZerobss>

08001832 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001832:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001834:	3204      	adds	r2, #4

08001836 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001836:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001838:	d3fb      	bcc.n	8001832 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800183a:	f7ff ffd7 	bl	80017ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800183e:	f001 fbb5 	bl	8002fac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001842:	f7ff fcd5 	bl	80011f0 <main>
  bx  lr    
 8001846:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001848:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800184c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001850:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001854:	08003ef8 	.word	0x08003ef8
  ldr r2, =_sbss
 8001858:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800185c:	20000274 	.word	0x20000274

08001860 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001860:	e7fe      	b.n	8001860 <ADC_IRQHandler>
	...

08001864 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001868:	4b0e      	ldr	r3, [pc, #56]	; (80018a4 <HAL_Init+0x40>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a0d      	ldr	r2, [pc, #52]	; (80018a4 <HAL_Init+0x40>)
 800186e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001872:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001874:	4b0b      	ldr	r3, [pc, #44]	; (80018a4 <HAL_Init+0x40>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a0a      	ldr	r2, [pc, #40]	; (80018a4 <HAL_Init+0x40>)
 800187a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800187e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001880:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <HAL_Init+0x40>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a07      	ldr	r2, [pc, #28]	; (80018a4 <HAL_Init+0x40>)
 8001886:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800188a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800188c:	2003      	movs	r0, #3
 800188e:	f000 fd31 	bl	80022f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001892:	2000      	movs	r0, #0
 8001894:	f000 f808 	bl	80018a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001898:	f7ff ff12 	bl	80016c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40023c00 	.word	0x40023c00

080018a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018b0:	4b12      	ldr	r3, [pc, #72]	; (80018fc <HAL_InitTick+0x54>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	4b12      	ldr	r3, [pc, #72]	; (8001900 <HAL_InitTick+0x58>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	4619      	mov	r1, r3
 80018ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018be:	fbb3 f3f1 	udiv	r3, r3, r1
 80018c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c6:	4618      	mov	r0, r3
 80018c8:	f000 fd3b 	bl	8002342 <HAL_SYSTICK_Config>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e00e      	b.n	80018f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b0f      	cmp	r3, #15
 80018da:	d80a      	bhi.n	80018f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018dc:	2200      	movs	r2, #0
 80018de:	6879      	ldr	r1, [r7, #4]
 80018e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018e4:	f000 fd11 	bl	800230a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018e8:	4a06      	ldr	r2, [pc, #24]	; (8001904 <HAL_InitTick+0x5c>)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
 80018f0:	e000      	b.n	80018f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20000000 	.word	0x20000000
 8001900:	20000008 	.word	0x20000008
 8001904:	20000004 	.word	0x20000004

08001908 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800190c:	4b06      	ldr	r3, [pc, #24]	; (8001928 <HAL_IncTick+0x20>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	461a      	mov	r2, r3
 8001912:	4b06      	ldr	r3, [pc, #24]	; (800192c <HAL_IncTick+0x24>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4413      	add	r3, r2
 8001918:	4a04      	ldr	r2, [pc, #16]	; (800192c <HAL_IncTick+0x24>)
 800191a:	6013      	str	r3, [r2, #0]
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	20000008 	.word	0x20000008
 800192c:	20000138 	.word	0x20000138

08001930 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  return uwTick;
 8001934:	4b03      	ldr	r3, [pc, #12]	; (8001944 <HAL_GetTick+0x14>)
 8001936:	681b      	ldr	r3, [r3, #0]
}
 8001938:	4618      	mov	r0, r3
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	20000138 	.word	0x20000138

08001948 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001950:	f7ff ffee 	bl	8001930 <HAL_GetTick>
 8001954:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001960:	d005      	beq.n	800196e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001962:	4b0a      	ldr	r3, [pc, #40]	; (800198c <HAL_Delay+0x44>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	461a      	mov	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	4413      	add	r3, r2
 800196c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800196e:	bf00      	nop
 8001970:	f7ff ffde 	bl	8001930 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	429a      	cmp	r2, r3
 800197e:	d8f7      	bhi.n	8001970 <HAL_Delay+0x28>
  {
  }
}
 8001980:	bf00      	nop
 8001982:	bf00      	nop
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	20000008 	.word	0x20000008

08001990 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001998:	2300      	movs	r3, #0
 800199a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e033      	b.n	8001a0e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d109      	bne.n	80019c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7ff feae 	bl	8001710 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c6:	f003 0310 	and.w	r3, r3, #16
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d118      	bne.n	8001a00 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80019d6:	f023 0302 	bic.w	r3, r3, #2
 80019da:	f043 0202 	orr.w	r2, r3, #2
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 fad8 	bl	8001f98 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	f023 0303 	bic.w	r3, r3, #3
 80019f6:	f043 0201 	orr.w	r2, r3, #1
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	641a      	str	r2, [r3, #64]	; 0x40
 80019fe:	e001      	b.n	8001a04 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
	...

08001a18 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001a20:	2300      	movs	r3, #0
 8001a22:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d101      	bne.n	8001a32 <HAL_ADC_Start+0x1a>
 8001a2e:	2302      	movs	r3, #2
 8001a30:	e0b2      	b.n	8001b98 <HAL_ADC_Start+0x180>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2201      	movs	r2, #1
 8001a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f003 0301 	and.w	r3, r3, #1
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d018      	beq.n	8001a7a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	689a      	ldr	r2, [r3, #8]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f042 0201 	orr.w	r2, r2, #1
 8001a56:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a58:	4b52      	ldr	r3, [pc, #328]	; (8001ba4 <HAL_ADC_Start+0x18c>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a52      	ldr	r2, [pc, #328]	; (8001ba8 <HAL_ADC_Start+0x190>)
 8001a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a62:	0c9a      	lsrs	r2, r3, #18
 8001a64:	4613      	mov	r3, r2
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	4413      	add	r3, r2
 8001a6a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001a6c:	e002      	b.n	8001a74 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	3b01      	subs	r3, #1
 8001a72:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1f9      	bne.n	8001a6e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	f003 0301 	and.w	r3, r3, #1
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d17a      	bne.n	8001b7e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a90:	f023 0301 	bic.w	r3, r3, #1
 8001a94:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d007      	beq.n	8001aba <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ab2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ac2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ac6:	d106      	bne.n	8001ad6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001acc:	f023 0206 	bic.w	r2, r3, #6
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	645a      	str	r2, [r3, #68]	; 0x44
 8001ad4:	e002      	b.n	8001adc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ae4:	4b31      	ldr	r3, [pc, #196]	; (8001bac <HAL_ADC_Start+0x194>)
 8001ae6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001af0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f003 031f 	and.w	r3, r3, #31
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d12a      	bne.n	8001b54 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a2b      	ldr	r2, [pc, #172]	; (8001bb0 <HAL_ADC_Start+0x198>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d015      	beq.n	8001b34 <HAL_ADC_Start+0x11c>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a29      	ldr	r2, [pc, #164]	; (8001bb4 <HAL_ADC_Start+0x19c>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d105      	bne.n	8001b1e <HAL_ADC_Start+0x106>
 8001b12:	4b26      	ldr	r3, [pc, #152]	; (8001bac <HAL_ADC_Start+0x194>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f003 031f 	and.w	r3, r3, #31
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d00a      	beq.n	8001b34 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a25      	ldr	r2, [pc, #148]	; (8001bb8 <HAL_ADC_Start+0x1a0>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d136      	bne.n	8001b96 <HAL_ADC_Start+0x17e>
 8001b28:	4b20      	ldr	r3, [pc, #128]	; (8001bac <HAL_ADC_Start+0x194>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f003 0310 	and.w	r3, r3, #16
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d130      	bne.n	8001b96 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d129      	bne.n	8001b96 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b50:	609a      	str	r2, [r3, #8]
 8001b52:	e020      	b.n	8001b96 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a15      	ldr	r2, [pc, #84]	; (8001bb0 <HAL_ADC_Start+0x198>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d11b      	bne.n	8001b96 <HAL_ADC_Start+0x17e>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d114      	bne.n	8001b96 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	689a      	ldr	r2, [r3, #8]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b7a:	609a      	str	r2, [r3, #8]
 8001b7c:	e00b      	b.n	8001b96 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b82:	f043 0210 	orr.w	r2, r3, #16
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8e:	f043 0201 	orr.w	r2, r3, #1
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3714      	adds	r7, #20
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	20000000 	.word	0x20000000
 8001ba8:	431bde83 	.word	0x431bde83
 8001bac:	40012300 	.word	0x40012300
 8001bb0:	40012000 	.word	0x40012000
 8001bb4:	40012100 	.word	0x40012100
 8001bb8:	40012200 	.word	0x40012200

08001bbc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d101      	bne.n	8001bd2 <HAL_ADC_Stop+0x16>
 8001bce:	2302      	movs	r3, #2
 8001bd0:	e021      	b.n	8001c16 <HAL_ADC_Stop+0x5a>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f022 0201 	bic.w	r2, r2, #1
 8001be8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f003 0301 	and.w	r3, r3, #1
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d109      	bne.n	8001c0c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c00:	f023 0301 	bic.w	r3, r3, #1
 8001c04:	f043 0201 	orr.w	r2, r3, #1
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b084      	sub	sp, #16
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
 8001c2a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c3e:	d113      	bne.n	8001c68 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001c4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c4e:	d10b      	bne.n	8001c68 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c54:	f043 0220 	orr.w	r2, r3, #32
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e063      	b.n	8001d30 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001c68:	f7ff fe62 	bl	8001930 <HAL_GetTick>
 8001c6c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c6e:	e021      	b.n	8001cb4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c76:	d01d      	beq.n	8001cb4 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d007      	beq.n	8001c8e <HAL_ADC_PollForConversion+0x6c>
 8001c7e:	f7ff fe57 	bl	8001930 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d212      	bcs.n	8001cb4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d00b      	beq.n	8001cb4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca0:	f043 0204 	orr.w	r2, r3, #4
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e03d      	b.n	8001d30 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d1d6      	bne.n	8001c70 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f06f 0212 	mvn.w	r2, #18
 8001cca:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d123      	bne.n	8001d2e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d11f      	bne.n	8001d2e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d006      	beq.n	8001d0a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d111      	bne.n	8001d2e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d105      	bne.n	8001d2e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	f043 0201 	orr.w	r2, r3, #1
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
	...

08001d54 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d101      	bne.n	8001d70 <HAL_ADC_ConfigChannel+0x1c>
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	e105      	b.n	8001f7c <HAL_ADC_ConfigChannel+0x228>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2b09      	cmp	r3, #9
 8001d7e:	d925      	bls.n	8001dcc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	68d9      	ldr	r1, [r3, #12]
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	4613      	mov	r3, r2
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	4413      	add	r3, r2
 8001d94:	3b1e      	subs	r3, #30
 8001d96:	2207      	movs	r2, #7
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43da      	mvns	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	400a      	ands	r2, r1
 8001da4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	68d9      	ldr	r1, [r3, #12]
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	4618      	mov	r0, r3
 8001db8:	4603      	mov	r3, r0
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	4403      	add	r3, r0
 8001dbe:	3b1e      	subs	r3, #30
 8001dc0:	409a      	lsls	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	60da      	str	r2, [r3, #12]
 8001dca:	e022      	b.n	8001e12 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6919      	ldr	r1, [r3, #16]
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	461a      	mov	r2, r3
 8001dda:	4613      	mov	r3, r2
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	4413      	add	r3, r2
 8001de0:	2207      	movs	r2, #7
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	43da      	mvns	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	400a      	ands	r2, r1
 8001dee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6919      	ldr	r1, [r3, #16]
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	689a      	ldr	r2, [r3, #8]
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	4618      	mov	r0, r3
 8001e02:	4603      	mov	r3, r0
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	4403      	add	r3, r0
 8001e08:	409a      	lsls	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2b06      	cmp	r3, #6
 8001e18:	d824      	bhi.n	8001e64 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685a      	ldr	r2, [r3, #4]
 8001e24:	4613      	mov	r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	4413      	add	r3, r2
 8001e2a:	3b05      	subs	r3, #5
 8001e2c:	221f      	movs	r2, #31
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43da      	mvns	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	400a      	ands	r2, r1
 8001e3a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	4618      	mov	r0, r3
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	4413      	add	r3, r2
 8001e54:	3b05      	subs	r3, #5
 8001e56:	fa00 f203 	lsl.w	r2, r0, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	635a      	str	r2, [r3, #52]	; 0x34
 8001e62:	e04c      	b.n	8001efe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	2b0c      	cmp	r3, #12
 8001e6a:	d824      	bhi.n	8001eb6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685a      	ldr	r2, [r3, #4]
 8001e76:	4613      	mov	r3, r2
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	4413      	add	r3, r2
 8001e7c:	3b23      	subs	r3, #35	; 0x23
 8001e7e:	221f      	movs	r2, #31
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	43da      	mvns	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	400a      	ands	r2, r1
 8001e8c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685a      	ldr	r2, [r3, #4]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4413      	add	r3, r2
 8001ea6:	3b23      	subs	r3, #35	; 0x23
 8001ea8:	fa00 f203 	lsl.w	r2, r0, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	631a      	str	r2, [r3, #48]	; 0x30
 8001eb4:	e023      	b.n	8001efe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4413      	add	r3, r2
 8001ec6:	3b41      	subs	r3, #65	; 0x41
 8001ec8:	221f      	movs	r2, #31
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43da      	mvns	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	400a      	ands	r2, r1
 8001ed6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685a      	ldr	r2, [r3, #4]
 8001eea:	4613      	mov	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	4413      	add	r3, r2
 8001ef0:	3b41      	subs	r3, #65	; 0x41
 8001ef2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	430a      	orrs	r2, r1
 8001efc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001efe:	4b22      	ldr	r3, [pc, #136]	; (8001f88 <HAL_ADC_ConfigChannel+0x234>)
 8001f00:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a21      	ldr	r2, [pc, #132]	; (8001f8c <HAL_ADC_ConfigChannel+0x238>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d109      	bne.n	8001f20 <HAL_ADC_ConfigChannel+0x1cc>
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2b12      	cmp	r3, #18
 8001f12:	d105      	bne.n	8001f20 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a19      	ldr	r2, [pc, #100]	; (8001f8c <HAL_ADC_ConfigChannel+0x238>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d123      	bne.n	8001f72 <HAL_ADC_ConfigChannel+0x21e>
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2b10      	cmp	r3, #16
 8001f30:	d003      	beq.n	8001f3a <HAL_ADC_ConfigChannel+0x1e6>
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2b11      	cmp	r3, #17
 8001f38:	d11b      	bne.n	8001f72 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2b10      	cmp	r3, #16
 8001f4c:	d111      	bne.n	8001f72 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f4e:	4b10      	ldr	r3, [pc, #64]	; (8001f90 <HAL_ADC_ConfigChannel+0x23c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a10      	ldr	r2, [pc, #64]	; (8001f94 <HAL_ADC_ConfigChannel+0x240>)
 8001f54:	fba2 2303 	umull	r2, r3, r2, r3
 8001f58:	0c9a      	lsrs	r2, r3, #18
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	4413      	add	r3, r2
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f64:	e002      	b.n	8001f6c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1f9      	bne.n	8001f66 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3714      	adds	r7, #20
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	40012300 	.word	0x40012300
 8001f8c:	40012000 	.word	0x40012000
 8001f90:	20000000 	.word	0x20000000
 8001f94:	431bde83 	.word	0x431bde83

08001f98 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fa0:	4b79      	ldr	r3, [pc, #484]	; (8002188 <ADC_Init+0x1f0>)
 8001fa2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	685a      	ldr	r2, [r3, #4]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	431a      	orrs	r2, r3
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	685a      	ldr	r2, [r3, #4]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fcc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	6859      	ldr	r1, [r3, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	691b      	ldr	r3, [r3, #16]
 8001fd8:	021a      	lsls	r2, r3, #8
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	685a      	ldr	r2, [r3, #4]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001ff0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	6859      	ldr	r1, [r3, #4]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689a      	ldr	r2, [r3, #8]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	430a      	orrs	r2, r1
 8002002:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	689a      	ldr	r2, [r3, #8]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002012:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	6899      	ldr	r1, [r3, #8]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	68da      	ldr	r2, [r3, #12]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	430a      	orrs	r2, r1
 8002024:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202a:	4a58      	ldr	r2, [pc, #352]	; (800218c <ADC_Init+0x1f4>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d022      	beq.n	8002076 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689a      	ldr	r2, [r3, #8]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800203e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6899      	ldr	r1, [r3, #8]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	430a      	orrs	r2, r1
 8002050:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002060:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	6899      	ldr	r1, [r3, #8]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	430a      	orrs	r2, r1
 8002072:	609a      	str	r2, [r3, #8]
 8002074:	e00f      	b.n	8002096 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	689a      	ldr	r2, [r3, #8]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002084:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002094:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f022 0202 	bic.w	r2, r2, #2
 80020a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	6899      	ldr	r1, [r3, #8]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	7e1b      	ldrb	r3, [r3, #24]
 80020b0:	005a      	lsls	r2, r3, #1
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	430a      	orrs	r2, r1
 80020b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d01b      	beq.n	80020fc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	685a      	ldr	r2, [r3, #4]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80020e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6859      	ldr	r1, [r3, #4]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ee:	3b01      	subs	r3, #1
 80020f0:	035a      	lsls	r2, r3, #13
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	430a      	orrs	r2, r1
 80020f8:	605a      	str	r2, [r3, #4]
 80020fa:	e007      	b.n	800210c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	685a      	ldr	r2, [r3, #4]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800210a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800211a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	3b01      	subs	r3, #1
 8002128:	051a      	lsls	r2, r3, #20
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	430a      	orrs	r2, r1
 8002130:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002140:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6899      	ldr	r1, [r3, #8]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800214e:	025a      	lsls	r2, r3, #9
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	430a      	orrs	r2, r1
 8002156:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	689a      	ldr	r2, [r3, #8]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002166:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6899      	ldr	r1, [r3, #8]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	029a      	lsls	r2, r3, #10
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	430a      	orrs	r2, r1
 800217a:	609a      	str	r2, [r3, #8]
}
 800217c:	bf00      	nop
 800217e:	3714      	adds	r7, #20
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	40012300 	.word	0x40012300
 800218c:	0f000001 	.word	0x0f000001

08002190 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021a0:	4b0c      	ldr	r3, [pc, #48]	; (80021d4 <__NVIC_SetPriorityGrouping+0x44>)
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021a6:	68ba      	ldr	r2, [r7, #8]
 80021a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021ac:	4013      	ands	r3, r2
 80021ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021c2:	4a04      	ldr	r2, [pc, #16]	; (80021d4 <__NVIC_SetPriorityGrouping+0x44>)
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	60d3      	str	r3, [r2, #12]
}
 80021c8:	bf00      	nop
 80021ca:	3714      	adds	r7, #20
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr
 80021d4:	e000ed00 	.word	0xe000ed00

080021d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021dc:	4b04      	ldr	r3, [pc, #16]	; (80021f0 <__NVIC_GetPriorityGrouping+0x18>)
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	0a1b      	lsrs	r3, r3, #8
 80021e2:	f003 0307 	and.w	r3, r3, #7
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	e000ed00 	.word	0xe000ed00

080021f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	6039      	str	r1, [r7, #0]
 80021fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002204:	2b00      	cmp	r3, #0
 8002206:	db0a      	blt.n	800221e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	b2da      	uxtb	r2, r3
 800220c:	490c      	ldr	r1, [pc, #48]	; (8002240 <__NVIC_SetPriority+0x4c>)
 800220e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002212:	0112      	lsls	r2, r2, #4
 8002214:	b2d2      	uxtb	r2, r2
 8002216:	440b      	add	r3, r1
 8002218:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800221c:	e00a      	b.n	8002234 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	b2da      	uxtb	r2, r3
 8002222:	4908      	ldr	r1, [pc, #32]	; (8002244 <__NVIC_SetPriority+0x50>)
 8002224:	79fb      	ldrb	r3, [r7, #7]
 8002226:	f003 030f 	and.w	r3, r3, #15
 800222a:	3b04      	subs	r3, #4
 800222c:	0112      	lsls	r2, r2, #4
 800222e:	b2d2      	uxtb	r2, r2
 8002230:	440b      	add	r3, r1
 8002232:	761a      	strb	r2, [r3, #24]
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	e000e100 	.word	0xe000e100
 8002244:	e000ed00 	.word	0xe000ed00

08002248 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002248:	b480      	push	{r7}
 800224a:	b089      	sub	sp, #36	; 0x24
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	f1c3 0307 	rsb	r3, r3, #7
 8002262:	2b04      	cmp	r3, #4
 8002264:	bf28      	it	cs
 8002266:	2304      	movcs	r3, #4
 8002268:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	3304      	adds	r3, #4
 800226e:	2b06      	cmp	r3, #6
 8002270:	d902      	bls.n	8002278 <NVIC_EncodePriority+0x30>
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	3b03      	subs	r3, #3
 8002276:	e000      	b.n	800227a <NVIC_EncodePriority+0x32>
 8002278:	2300      	movs	r3, #0
 800227a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800227c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	43da      	mvns	r2, r3
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	401a      	ands	r2, r3
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002290:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	fa01 f303 	lsl.w	r3, r1, r3
 800229a:	43d9      	mvns	r1, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a0:	4313      	orrs	r3, r2
         );
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3724      	adds	r7, #36	; 0x24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
	...

080022b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3b01      	subs	r3, #1
 80022bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022c0:	d301      	bcc.n	80022c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022c2:	2301      	movs	r3, #1
 80022c4:	e00f      	b.n	80022e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022c6:	4a0a      	ldr	r2, [pc, #40]	; (80022f0 <SysTick_Config+0x40>)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3b01      	subs	r3, #1
 80022cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ce:	210f      	movs	r1, #15
 80022d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022d4:	f7ff ff8e 	bl	80021f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022d8:	4b05      	ldr	r3, [pc, #20]	; (80022f0 <SysTick_Config+0x40>)
 80022da:	2200      	movs	r2, #0
 80022dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022de:	4b04      	ldr	r3, [pc, #16]	; (80022f0 <SysTick_Config+0x40>)
 80022e0:	2207      	movs	r2, #7
 80022e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	e000e010 	.word	0xe000e010

080022f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f7ff ff47 	bl	8002190 <__NVIC_SetPriorityGrouping>
}
 8002302:	bf00      	nop
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800230a:	b580      	push	{r7, lr}
 800230c:	b086      	sub	sp, #24
 800230e:	af00      	add	r7, sp, #0
 8002310:	4603      	mov	r3, r0
 8002312:	60b9      	str	r1, [r7, #8]
 8002314:	607a      	str	r2, [r7, #4]
 8002316:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002318:	2300      	movs	r3, #0
 800231a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800231c:	f7ff ff5c 	bl	80021d8 <__NVIC_GetPriorityGrouping>
 8002320:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	68b9      	ldr	r1, [r7, #8]
 8002326:	6978      	ldr	r0, [r7, #20]
 8002328:	f7ff ff8e 	bl	8002248 <NVIC_EncodePriority>
 800232c:	4602      	mov	r2, r0
 800232e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002332:	4611      	mov	r1, r2
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff ff5d 	bl	80021f4 <__NVIC_SetPriority>
}
 800233a:	bf00      	nop
 800233c:	3718      	adds	r7, #24
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b082      	sub	sp, #8
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f7ff ffb0 	bl	80022b0 <SysTick_Config>
 8002350:	4603      	mov	r3, r0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
	...

0800235c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800235c:	b480      	push	{r7}
 800235e:	b089      	sub	sp, #36	; 0x24
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002366:	2300      	movs	r3, #0
 8002368:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800236a:	2300      	movs	r3, #0
 800236c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800236e:	2300      	movs	r3, #0
 8002370:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002372:	2300      	movs	r3, #0
 8002374:	61fb      	str	r3, [r7, #28]
 8002376:	e16b      	b.n	8002650 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002378:	2201      	movs	r2, #1
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	697a      	ldr	r2, [r7, #20]
 8002388:	4013      	ands	r3, r2
 800238a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	429a      	cmp	r2, r3
 8002392:	f040 815a 	bne.w	800264a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f003 0303 	and.w	r3, r3, #3
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d005      	beq.n	80023ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d130      	bne.n	8002410 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	2203      	movs	r2, #3
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	43db      	mvns	r3, r3
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	4013      	ands	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	68da      	ldr	r2, [r3, #12]
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023e4:	2201      	movs	r2, #1
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	43db      	mvns	r3, r3
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	4013      	ands	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	091b      	lsrs	r3, r3, #4
 80023fa:	f003 0201 	and.w	r2, r3, #1
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	4313      	orrs	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f003 0303 	and.w	r3, r3, #3
 8002418:	2b03      	cmp	r3, #3
 800241a:	d017      	beq.n	800244c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	2203      	movs	r2, #3
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	43db      	mvns	r3, r3
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	4013      	ands	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	689a      	ldr	r2, [r3, #8]
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	4313      	orrs	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f003 0303 	and.w	r3, r3, #3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d123      	bne.n	80024a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	08da      	lsrs	r2, r3, #3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	3208      	adds	r2, #8
 8002460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002464:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	220f      	movs	r2, #15
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	43db      	mvns	r3, r3
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4013      	ands	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	691a      	ldr	r2, [r3, #16]
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	4313      	orrs	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	08da      	lsrs	r2, r3, #3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	3208      	adds	r2, #8
 800249a:	69b9      	ldr	r1, [r7, #24]
 800249c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	2203      	movs	r2, #3
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	43db      	mvns	r3, r3
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	4013      	ands	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f003 0203 	and.w	r2, r3, #3
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f000 80b4 	beq.w	800264a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024e2:	2300      	movs	r3, #0
 80024e4:	60fb      	str	r3, [r7, #12]
 80024e6:	4b60      	ldr	r3, [pc, #384]	; (8002668 <HAL_GPIO_Init+0x30c>)
 80024e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ea:	4a5f      	ldr	r2, [pc, #380]	; (8002668 <HAL_GPIO_Init+0x30c>)
 80024ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024f0:	6453      	str	r3, [r2, #68]	; 0x44
 80024f2:	4b5d      	ldr	r3, [pc, #372]	; (8002668 <HAL_GPIO_Init+0x30c>)
 80024f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024fe:	4a5b      	ldr	r2, [pc, #364]	; (800266c <HAL_GPIO_Init+0x310>)
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	089b      	lsrs	r3, r3, #2
 8002504:	3302      	adds	r3, #2
 8002506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800250a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	f003 0303 	and.w	r3, r3, #3
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	220f      	movs	r2, #15
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	43db      	mvns	r3, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4013      	ands	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a52      	ldr	r2, [pc, #328]	; (8002670 <HAL_GPIO_Init+0x314>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d02b      	beq.n	8002582 <HAL_GPIO_Init+0x226>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a51      	ldr	r2, [pc, #324]	; (8002674 <HAL_GPIO_Init+0x318>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d025      	beq.n	800257e <HAL_GPIO_Init+0x222>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a50      	ldr	r2, [pc, #320]	; (8002678 <HAL_GPIO_Init+0x31c>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d01f      	beq.n	800257a <HAL_GPIO_Init+0x21e>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a4f      	ldr	r2, [pc, #316]	; (800267c <HAL_GPIO_Init+0x320>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d019      	beq.n	8002576 <HAL_GPIO_Init+0x21a>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a4e      	ldr	r2, [pc, #312]	; (8002680 <HAL_GPIO_Init+0x324>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d013      	beq.n	8002572 <HAL_GPIO_Init+0x216>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a4d      	ldr	r2, [pc, #308]	; (8002684 <HAL_GPIO_Init+0x328>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d00d      	beq.n	800256e <HAL_GPIO_Init+0x212>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a4c      	ldr	r2, [pc, #304]	; (8002688 <HAL_GPIO_Init+0x32c>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d007      	beq.n	800256a <HAL_GPIO_Init+0x20e>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a4b      	ldr	r2, [pc, #300]	; (800268c <HAL_GPIO_Init+0x330>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d101      	bne.n	8002566 <HAL_GPIO_Init+0x20a>
 8002562:	2307      	movs	r3, #7
 8002564:	e00e      	b.n	8002584 <HAL_GPIO_Init+0x228>
 8002566:	2308      	movs	r3, #8
 8002568:	e00c      	b.n	8002584 <HAL_GPIO_Init+0x228>
 800256a:	2306      	movs	r3, #6
 800256c:	e00a      	b.n	8002584 <HAL_GPIO_Init+0x228>
 800256e:	2305      	movs	r3, #5
 8002570:	e008      	b.n	8002584 <HAL_GPIO_Init+0x228>
 8002572:	2304      	movs	r3, #4
 8002574:	e006      	b.n	8002584 <HAL_GPIO_Init+0x228>
 8002576:	2303      	movs	r3, #3
 8002578:	e004      	b.n	8002584 <HAL_GPIO_Init+0x228>
 800257a:	2302      	movs	r3, #2
 800257c:	e002      	b.n	8002584 <HAL_GPIO_Init+0x228>
 800257e:	2301      	movs	r3, #1
 8002580:	e000      	b.n	8002584 <HAL_GPIO_Init+0x228>
 8002582:	2300      	movs	r3, #0
 8002584:	69fa      	ldr	r2, [r7, #28]
 8002586:	f002 0203 	and.w	r2, r2, #3
 800258a:	0092      	lsls	r2, r2, #2
 800258c:	4093      	lsls	r3, r2
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	4313      	orrs	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002594:	4935      	ldr	r1, [pc, #212]	; (800266c <HAL_GPIO_Init+0x310>)
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	089b      	lsrs	r3, r3, #2
 800259a:	3302      	adds	r3, #2
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025a2:	4b3b      	ldr	r3, [pc, #236]	; (8002690 <HAL_GPIO_Init+0x334>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	43db      	mvns	r3, r3
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	4013      	ands	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d003      	beq.n	80025c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025c6:	4a32      	ldr	r2, [pc, #200]	; (8002690 <HAL_GPIO_Init+0x334>)
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025cc:	4b30      	ldr	r3, [pc, #192]	; (8002690 <HAL_GPIO_Init+0x334>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	43db      	mvns	r3, r3
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	4013      	ands	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d003      	beq.n	80025f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025f0:	4a27      	ldr	r2, [pc, #156]	; (8002690 <HAL_GPIO_Init+0x334>)
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025f6:	4b26      	ldr	r3, [pc, #152]	; (8002690 <HAL_GPIO_Init+0x334>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	43db      	mvns	r3, r3
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	4013      	ands	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d003      	beq.n	800261a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	4313      	orrs	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800261a:	4a1d      	ldr	r2, [pc, #116]	; (8002690 <HAL_GPIO_Init+0x334>)
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002620:	4b1b      	ldr	r3, [pc, #108]	; (8002690 <HAL_GPIO_Init+0x334>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	43db      	mvns	r3, r3
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4013      	ands	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d003      	beq.n	8002644 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	4313      	orrs	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002644:	4a12      	ldr	r2, [pc, #72]	; (8002690 <HAL_GPIO_Init+0x334>)
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	3301      	adds	r3, #1
 800264e:	61fb      	str	r3, [r7, #28]
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	2b0f      	cmp	r3, #15
 8002654:	f67f ae90 	bls.w	8002378 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002658:	bf00      	nop
 800265a:	bf00      	nop
 800265c:	3724      	adds	r7, #36	; 0x24
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	40023800 	.word	0x40023800
 800266c:	40013800 	.word	0x40013800
 8002670:	40020000 	.word	0x40020000
 8002674:	40020400 	.word	0x40020400
 8002678:	40020800 	.word	0x40020800
 800267c:	40020c00 	.word	0x40020c00
 8002680:	40021000 	.word	0x40021000
 8002684:	40021400 	.word	0x40021400
 8002688:	40021800 	.word	0x40021800
 800268c:	40021c00 	.word	0x40021c00
 8002690:	40013c00 	.word	0x40013c00

08002694 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	460b      	mov	r3, r1
 800269e:	807b      	strh	r3, [r7, #2]
 80026a0:	4613      	mov	r3, r2
 80026a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026a4:	787b      	ldrb	r3, [r7, #1]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026aa:	887a      	ldrh	r2, [r7, #2]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026b0:	e003      	b.n	80026ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026b2:	887b      	ldrh	r3, [r7, #2]
 80026b4:	041a      	lsls	r2, r3, #16
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	619a      	str	r2, [r3, #24]
}
 80026ba:	bf00      	nop
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
	...

080026c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e267      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d075      	beq.n	80027d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026e6:	4b88      	ldr	r3, [pc, #544]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 030c 	and.w	r3, r3, #12
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	d00c      	beq.n	800270c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026f2:	4b85      	ldr	r3, [pc, #532]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026fa:	2b08      	cmp	r3, #8
 80026fc:	d112      	bne.n	8002724 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026fe:	4b82      	ldr	r3, [pc, #520]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002706:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800270a:	d10b      	bne.n	8002724 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800270c:	4b7e      	ldr	r3, [pc, #504]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d05b      	beq.n	80027d0 <HAL_RCC_OscConfig+0x108>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d157      	bne.n	80027d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e242      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800272c:	d106      	bne.n	800273c <HAL_RCC_OscConfig+0x74>
 800272e:	4b76      	ldr	r3, [pc, #472]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a75      	ldr	r2, [pc, #468]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 8002734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002738:	6013      	str	r3, [r2, #0]
 800273a:	e01d      	b.n	8002778 <HAL_RCC_OscConfig+0xb0>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002744:	d10c      	bne.n	8002760 <HAL_RCC_OscConfig+0x98>
 8002746:	4b70      	ldr	r3, [pc, #448]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a6f      	ldr	r2, [pc, #444]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 800274c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002750:	6013      	str	r3, [r2, #0]
 8002752:	4b6d      	ldr	r3, [pc, #436]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a6c      	ldr	r2, [pc, #432]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 8002758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800275c:	6013      	str	r3, [r2, #0]
 800275e:	e00b      	b.n	8002778 <HAL_RCC_OscConfig+0xb0>
 8002760:	4b69      	ldr	r3, [pc, #420]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a68      	ldr	r2, [pc, #416]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 8002766:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800276a:	6013      	str	r3, [r2, #0]
 800276c:	4b66      	ldr	r3, [pc, #408]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a65      	ldr	r2, [pc, #404]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 8002772:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002776:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d013      	beq.n	80027a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002780:	f7ff f8d6 	bl	8001930 <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002786:	e008      	b.n	800279a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002788:	f7ff f8d2 	bl	8001930 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b64      	cmp	r3, #100	; 0x64
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e207      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800279a:	4b5b      	ldr	r3, [pc, #364]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d0f0      	beq.n	8002788 <HAL_RCC_OscConfig+0xc0>
 80027a6:	e014      	b.n	80027d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a8:	f7ff f8c2 	bl	8001930 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027b0:	f7ff f8be 	bl	8001930 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b64      	cmp	r3, #100	; 0x64
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e1f3      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027c2:	4b51      	ldr	r3, [pc, #324]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1f0      	bne.n	80027b0 <HAL_RCC_OscConfig+0xe8>
 80027ce:	e000      	b.n	80027d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d063      	beq.n	80028a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027de:	4b4a      	ldr	r3, [pc, #296]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 030c 	and.w	r3, r3, #12
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d00b      	beq.n	8002802 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027ea:	4b47      	ldr	r3, [pc, #284]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027f2:	2b08      	cmp	r3, #8
 80027f4:	d11c      	bne.n	8002830 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027f6:	4b44      	ldr	r3, [pc, #272]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d116      	bne.n	8002830 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002802:	4b41      	ldr	r3, [pc, #260]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d005      	beq.n	800281a <HAL_RCC_OscConfig+0x152>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d001      	beq.n	800281a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e1c7      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800281a:	4b3b      	ldr	r3, [pc, #236]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	4937      	ldr	r1, [pc, #220]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 800282a:	4313      	orrs	r3, r2
 800282c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800282e:	e03a      	b.n	80028a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d020      	beq.n	800287a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002838:	4b34      	ldr	r3, [pc, #208]	; (800290c <HAL_RCC_OscConfig+0x244>)
 800283a:	2201      	movs	r2, #1
 800283c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283e:	f7ff f877 	bl	8001930 <HAL_GetTick>
 8002842:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002844:	e008      	b.n	8002858 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002846:	f7ff f873 	bl	8001930 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e1a8      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002858:	4b2b      	ldr	r3, [pc, #172]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d0f0      	beq.n	8002846 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002864:	4b28      	ldr	r3, [pc, #160]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	4925      	ldr	r1, [pc, #148]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 8002874:	4313      	orrs	r3, r2
 8002876:	600b      	str	r3, [r1, #0]
 8002878:	e015      	b.n	80028a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800287a:	4b24      	ldr	r3, [pc, #144]	; (800290c <HAL_RCC_OscConfig+0x244>)
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002880:	f7ff f856 	bl	8001930 <HAL_GetTick>
 8002884:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002888:	f7ff f852 	bl	8001930 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e187      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800289a:	4b1b      	ldr	r3, [pc, #108]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1f0      	bne.n	8002888 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0308 	and.w	r3, r3, #8
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d036      	beq.n	8002920 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d016      	beq.n	80028e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028ba:	4b15      	ldr	r3, [pc, #84]	; (8002910 <HAL_RCC_OscConfig+0x248>)
 80028bc:	2201      	movs	r2, #1
 80028be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c0:	f7ff f836 	bl	8001930 <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028c8:	f7ff f832 	bl	8001930 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e167      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028da:	4b0b      	ldr	r3, [pc, #44]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 80028dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0f0      	beq.n	80028c8 <HAL_RCC_OscConfig+0x200>
 80028e6:	e01b      	b.n	8002920 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028e8:	4b09      	ldr	r3, [pc, #36]	; (8002910 <HAL_RCC_OscConfig+0x248>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ee:	f7ff f81f 	bl	8001930 <HAL_GetTick>
 80028f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028f4:	e00e      	b.n	8002914 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028f6:	f7ff f81b 	bl	8001930 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d907      	bls.n	8002914 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e150      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
 8002908:	40023800 	.word	0x40023800
 800290c:	42470000 	.word	0x42470000
 8002910:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002914:	4b88      	ldr	r3, [pc, #544]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002916:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1ea      	bne.n	80028f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0304 	and.w	r3, r3, #4
 8002928:	2b00      	cmp	r3, #0
 800292a:	f000 8097 	beq.w	8002a5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800292e:	2300      	movs	r3, #0
 8002930:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002932:	4b81      	ldr	r3, [pc, #516]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d10f      	bne.n	800295e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800293e:	2300      	movs	r3, #0
 8002940:	60bb      	str	r3, [r7, #8]
 8002942:	4b7d      	ldr	r3, [pc, #500]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	4a7c      	ldr	r2, [pc, #496]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800294c:	6413      	str	r3, [r2, #64]	; 0x40
 800294e:	4b7a      	ldr	r3, [pc, #488]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002956:	60bb      	str	r3, [r7, #8]
 8002958:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800295a:	2301      	movs	r3, #1
 800295c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800295e:	4b77      	ldr	r3, [pc, #476]	; (8002b3c <HAL_RCC_OscConfig+0x474>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002966:	2b00      	cmp	r3, #0
 8002968:	d118      	bne.n	800299c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800296a:	4b74      	ldr	r3, [pc, #464]	; (8002b3c <HAL_RCC_OscConfig+0x474>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a73      	ldr	r2, [pc, #460]	; (8002b3c <HAL_RCC_OscConfig+0x474>)
 8002970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002974:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002976:	f7fe ffdb 	bl	8001930 <HAL_GetTick>
 800297a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800297c:	e008      	b.n	8002990 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800297e:	f7fe ffd7 	bl	8001930 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e10c      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002990:	4b6a      	ldr	r3, [pc, #424]	; (8002b3c <HAL_RCC_OscConfig+0x474>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002998:	2b00      	cmp	r3, #0
 800299a:	d0f0      	beq.n	800297e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d106      	bne.n	80029b2 <HAL_RCC_OscConfig+0x2ea>
 80029a4:	4b64      	ldr	r3, [pc, #400]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 80029a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a8:	4a63      	ldr	r2, [pc, #396]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 80029aa:	f043 0301 	orr.w	r3, r3, #1
 80029ae:	6713      	str	r3, [r2, #112]	; 0x70
 80029b0:	e01c      	b.n	80029ec <HAL_RCC_OscConfig+0x324>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	2b05      	cmp	r3, #5
 80029b8:	d10c      	bne.n	80029d4 <HAL_RCC_OscConfig+0x30c>
 80029ba:	4b5f      	ldr	r3, [pc, #380]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 80029bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029be:	4a5e      	ldr	r2, [pc, #376]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 80029c0:	f043 0304 	orr.w	r3, r3, #4
 80029c4:	6713      	str	r3, [r2, #112]	; 0x70
 80029c6:	4b5c      	ldr	r3, [pc, #368]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 80029c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ca:	4a5b      	ldr	r2, [pc, #364]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 80029cc:	f043 0301 	orr.w	r3, r3, #1
 80029d0:	6713      	str	r3, [r2, #112]	; 0x70
 80029d2:	e00b      	b.n	80029ec <HAL_RCC_OscConfig+0x324>
 80029d4:	4b58      	ldr	r3, [pc, #352]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 80029d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d8:	4a57      	ldr	r2, [pc, #348]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 80029da:	f023 0301 	bic.w	r3, r3, #1
 80029de:	6713      	str	r3, [r2, #112]	; 0x70
 80029e0:	4b55      	ldr	r3, [pc, #340]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 80029e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e4:	4a54      	ldr	r2, [pc, #336]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 80029e6:	f023 0304 	bic.w	r3, r3, #4
 80029ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d015      	beq.n	8002a20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f4:	f7fe ff9c 	bl	8001930 <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029fa:	e00a      	b.n	8002a12 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029fc:	f7fe ff98 	bl	8001930 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e0cb      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a12:	4b49      	ldr	r3, [pc, #292]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d0ee      	beq.n	80029fc <HAL_RCC_OscConfig+0x334>
 8002a1e:	e014      	b.n	8002a4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a20:	f7fe ff86 	bl	8001930 <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a26:	e00a      	b.n	8002a3e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a28:	f7fe ff82 	bl	8001930 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e0b5      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a3e:	4b3e      	ldr	r3, [pc, #248]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1ee      	bne.n	8002a28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a4a:	7dfb      	ldrb	r3, [r7, #23]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d105      	bne.n	8002a5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a50:	4b39      	ldr	r3, [pc, #228]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a54:	4a38      	ldr	r2, [pc, #224]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002a56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a5a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f000 80a1 	beq.w	8002ba8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a66:	4b34      	ldr	r3, [pc, #208]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f003 030c 	and.w	r3, r3, #12
 8002a6e:	2b08      	cmp	r3, #8
 8002a70:	d05c      	beq.n	8002b2c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d141      	bne.n	8002afe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a7a:	4b31      	ldr	r3, [pc, #196]	; (8002b40 <HAL_RCC_OscConfig+0x478>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a80:	f7fe ff56 	bl	8001930 <HAL_GetTick>
 8002a84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a88:	f7fe ff52 	bl	8001930 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e087      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a9a:	4b27      	ldr	r3, [pc, #156]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1f0      	bne.n	8002a88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	69da      	ldr	r2, [r3, #28]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab4:	019b      	lsls	r3, r3, #6
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002abc:	085b      	lsrs	r3, r3, #1
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	041b      	lsls	r3, r3, #16
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac8:	061b      	lsls	r3, r3, #24
 8002aca:	491b      	ldr	r1, [pc, #108]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ad0:	4b1b      	ldr	r3, [pc, #108]	; (8002b40 <HAL_RCC_OscConfig+0x478>)
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad6:	f7fe ff2b 	bl	8001930 <HAL_GetTick>
 8002ada:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002adc:	e008      	b.n	8002af0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ade:	f7fe ff27 	bl	8001930 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e05c      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002af0:	4b11      	ldr	r3, [pc, #68]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d0f0      	beq.n	8002ade <HAL_RCC_OscConfig+0x416>
 8002afc:	e054      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002afe:	4b10      	ldr	r3, [pc, #64]	; (8002b40 <HAL_RCC_OscConfig+0x478>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b04:	f7fe ff14 	bl	8001930 <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b0c:	f7fe ff10 	bl	8001930 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e045      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b1e:	4b06      	ldr	r3, [pc, #24]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1f0      	bne.n	8002b0c <HAL_RCC_OscConfig+0x444>
 8002b2a:	e03d      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d107      	bne.n	8002b44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e038      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
 8002b38:	40023800 	.word	0x40023800
 8002b3c:	40007000 	.word	0x40007000
 8002b40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b44:	4b1b      	ldr	r3, [pc, #108]	; (8002bb4 <HAL_RCC_OscConfig+0x4ec>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d028      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d121      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d11a      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b74:	4013      	ands	r3, r2
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d111      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8a:	085b      	lsrs	r3, r3, #1
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d107      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d001      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e000      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3718      	adds	r7, #24
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	40023800 	.word	0x40023800

08002bb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e0cc      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bcc:	4b68      	ldr	r3, [pc, #416]	; (8002d70 <HAL_RCC_ClockConfig+0x1b8>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0307 	and.w	r3, r3, #7
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d90c      	bls.n	8002bf4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bda:	4b65      	ldr	r3, [pc, #404]	; (8002d70 <HAL_RCC_ClockConfig+0x1b8>)
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	b2d2      	uxtb	r2, r2
 8002be0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002be2:	4b63      	ldr	r3, [pc, #396]	; (8002d70 <HAL_RCC_ClockConfig+0x1b8>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0307 	and.w	r3, r3, #7
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d001      	beq.n	8002bf4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e0b8      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d020      	beq.n	8002c42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0304 	and.w	r3, r3, #4
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d005      	beq.n	8002c18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c0c:	4b59      	ldr	r3, [pc, #356]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	4a58      	ldr	r2, [pc, #352]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0308 	and.w	r3, r3, #8
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d005      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c24:	4b53      	ldr	r3, [pc, #332]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	4a52      	ldr	r2, [pc, #328]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c30:	4b50      	ldr	r3, [pc, #320]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	494d      	ldr	r1, [pc, #308]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d044      	beq.n	8002cd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d107      	bne.n	8002c66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c56:	4b47      	ldr	r3, [pc, #284]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d119      	bne.n	8002c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e07f      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d003      	beq.n	8002c76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c72:	2b03      	cmp	r3, #3
 8002c74:	d107      	bne.n	8002c86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c76:	4b3f      	ldr	r3, [pc, #252]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d109      	bne.n	8002c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e06f      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c86:	4b3b      	ldr	r3, [pc, #236]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e067      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c96:	4b37      	ldr	r3, [pc, #220]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f023 0203 	bic.w	r2, r3, #3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	4934      	ldr	r1, [pc, #208]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ca8:	f7fe fe42 	bl	8001930 <HAL_GetTick>
 8002cac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cae:	e00a      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cb0:	f7fe fe3e 	bl	8001930 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e04f      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cc6:	4b2b      	ldr	r3, [pc, #172]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 020c 	and.w	r2, r3, #12
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d1eb      	bne.n	8002cb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cd8:	4b25      	ldr	r3, [pc, #148]	; (8002d70 <HAL_RCC_ClockConfig+0x1b8>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d20c      	bcs.n	8002d00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ce6:	4b22      	ldr	r3, [pc, #136]	; (8002d70 <HAL_RCC_ClockConfig+0x1b8>)
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	b2d2      	uxtb	r2, r2
 8002cec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cee:	4b20      	ldr	r3, [pc, #128]	; (8002d70 <HAL_RCC_ClockConfig+0x1b8>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0307 	and.w	r3, r3, #7
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d001      	beq.n	8002d00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e032      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0304 	and.w	r3, r3, #4
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d008      	beq.n	8002d1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d0c:	4b19      	ldr	r3, [pc, #100]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	4916      	ldr	r1, [pc, #88]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0308 	and.w	r3, r3, #8
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d009      	beq.n	8002d3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d2a:	4b12      	ldr	r3, [pc, #72]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	490e      	ldr	r1, [pc, #56]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d3e:	f000 f821 	bl	8002d84 <HAL_RCC_GetSysClockFreq>
 8002d42:	4602      	mov	r2, r0
 8002d44:	4b0b      	ldr	r3, [pc, #44]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	091b      	lsrs	r3, r3, #4
 8002d4a:	f003 030f 	and.w	r3, r3, #15
 8002d4e:	490a      	ldr	r1, [pc, #40]	; (8002d78 <HAL_RCC_ClockConfig+0x1c0>)
 8002d50:	5ccb      	ldrb	r3, [r1, r3]
 8002d52:	fa22 f303 	lsr.w	r3, r2, r3
 8002d56:	4a09      	ldr	r2, [pc, #36]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002d58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d5a:	4b09      	ldr	r3, [pc, #36]	; (8002d80 <HAL_RCC_ClockConfig+0x1c8>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7fe fda2 	bl	80018a8 <HAL_InitTick>

  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	40023c00 	.word	0x40023c00
 8002d74:	40023800 	.word	0x40023800
 8002d78:	08003ea4 	.word	0x08003ea4
 8002d7c:	20000000 	.word	0x20000000
 8002d80:	20000004 	.word	0x20000004

08002d84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d88:	b094      	sub	sp, #80	; 0x50
 8002d8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	647b      	str	r3, [r7, #68]	; 0x44
 8002d90:	2300      	movs	r3, #0
 8002d92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d94:	2300      	movs	r3, #0
 8002d96:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d9c:	4b79      	ldr	r3, [pc, #484]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f003 030c 	and.w	r3, r3, #12
 8002da4:	2b08      	cmp	r3, #8
 8002da6:	d00d      	beq.n	8002dc4 <HAL_RCC_GetSysClockFreq+0x40>
 8002da8:	2b08      	cmp	r3, #8
 8002daa:	f200 80e1 	bhi.w	8002f70 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d002      	beq.n	8002db8 <HAL_RCC_GetSysClockFreq+0x34>
 8002db2:	2b04      	cmp	r3, #4
 8002db4:	d003      	beq.n	8002dbe <HAL_RCC_GetSysClockFreq+0x3a>
 8002db6:	e0db      	b.n	8002f70 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002db8:	4b73      	ldr	r3, [pc, #460]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x204>)
 8002dba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002dbc:	e0db      	b.n	8002f76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dbe:	4b73      	ldr	r3, [pc, #460]	; (8002f8c <HAL_RCC_GetSysClockFreq+0x208>)
 8002dc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002dc2:	e0d8      	b.n	8002f76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dc4:	4b6f      	ldr	r3, [pc, #444]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dcc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dce:	4b6d      	ldr	r3, [pc, #436]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d063      	beq.n	8002ea2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dda:	4b6a      	ldr	r3, [pc, #424]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	099b      	lsrs	r3, r3, #6
 8002de0:	2200      	movs	r2, #0
 8002de2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002de4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dec:	633b      	str	r3, [r7, #48]	; 0x30
 8002dee:	2300      	movs	r3, #0
 8002df0:	637b      	str	r3, [r7, #52]	; 0x34
 8002df2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002df6:	4622      	mov	r2, r4
 8002df8:	462b      	mov	r3, r5
 8002dfa:	f04f 0000 	mov.w	r0, #0
 8002dfe:	f04f 0100 	mov.w	r1, #0
 8002e02:	0159      	lsls	r1, r3, #5
 8002e04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e08:	0150      	lsls	r0, r2, #5
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	4621      	mov	r1, r4
 8002e10:	1a51      	subs	r1, r2, r1
 8002e12:	6139      	str	r1, [r7, #16]
 8002e14:	4629      	mov	r1, r5
 8002e16:	eb63 0301 	sbc.w	r3, r3, r1
 8002e1a:	617b      	str	r3, [r7, #20]
 8002e1c:	f04f 0200 	mov.w	r2, #0
 8002e20:	f04f 0300 	mov.w	r3, #0
 8002e24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e28:	4659      	mov	r1, fp
 8002e2a:	018b      	lsls	r3, r1, #6
 8002e2c:	4651      	mov	r1, sl
 8002e2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e32:	4651      	mov	r1, sl
 8002e34:	018a      	lsls	r2, r1, #6
 8002e36:	4651      	mov	r1, sl
 8002e38:	ebb2 0801 	subs.w	r8, r2, r1
 8002e3c:	4659      	mov	r1, fp
 8002e3e:	eb63 0901 	sbc.w	r9, r3, r1
 8002e42:	f04f 0200 	mov.w	r2, #0
 8002e46:	f04f 0300 	mov.w	r3, #0
 8002e4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e56:	4690      	mov	r8, r2
 8002e58:	4699      	mov	r9, r3
 8002e5a:	4623      	mov	r3, r4
 8002e5c:	eb18 0303 	adds.w	r3, r8, r3
 8002e60:	60bb      	str	r3, [r7, #8]
 8002e62:	462b      	mov	r3, r5
 8002e64:	eb49 0303 	adc.w	r3, r9, r3
 8002e68:	60fb      	str	r3, [r7, #12]
 8002e6a:	f04f 0200 	mov.w	r2, #0
 8002e6e:	f04f 0300 	mov.w	r3, #0
 8002e72:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e76:	4629      	mov	r1, r5
 8002e78:	024b      	lsls	r3, r1, #9
 8002e7a:	4621      	mov	r1, r4
 8002e7c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e80:	4621      	mov	r1, r4
 8002e82:	024a      	lsls	r2, r1, #9
 8002e84:	4610      	mov	r0, r2
 8002e86:	4619      	mov	r1, r3
 8002e88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e94:	f7fd fe04 	bl	8000aa0 <__aeabi_uldivmod>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ea0:	e058      	b.n	8002f54 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ea2:	4b38      	ldr	r3, [pc, #224]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	099b      	lsrs	r3, r3, #6
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	4618      	mov	r0, r3
 8002eac:	4611      	mov	r1, r2
 8002eae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002eb2:	623b      	str	r3, [r7, #32]
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	627b      	str	r3, [r7, #36]	; 0x24
 8002eb8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ebc:	4642      	mov	r2, r8
 8002ebe:	464b      	mov	r3, r9
 8002ec0:	f04f 0000 	mov.w	r0, #0
 8002ec4:	f04f 0100 	mov.w	r1, #0
 8002ec8:	0159      	lsls	r1, r3, #5
 8002eca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ece:	0150      	lsls	r0, r2, #5
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	4641      	mov	r1, r8
 8002ed6:	ebb2 0a01 	subs.w	sl, r2, r1
 8002eda:	4649      	mov	r1, r9
 8002edc:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ee0:	f04f 0200 	mov.w	r2, #0
 8002ee4:	f04f 0300 	mov.w	r3, #0
 8002ee8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002eec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ef0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ef4:	ebb2 040a 	subs.w	r4, r2, sl
 8002ef8:	eb63 050b 	sbc.w	r5, r3, fp
 8002efc:	f04f 0200 	mov.w	r2, #0
 8002f00:	f04f 0300 	mov.w	r3, #0
 8002f04:	00eb      	lsls	r3, r5, #3
 8002f06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f0a:	00e2      	lsls	r2, r4, #3
 8002f0c:	4614      	mov	r4, r2
 8002f0e:	461d      	mov	r5, r3
 8002f10:	4643      	mov	r3, r8
 8002f12:	18e3      	adds	r3, r4, r3
 8002f14:	603b      	str	r3, [r7, #0]
 8002f16:	464b      	mov	r3, r9
 8002f18:	eb45 0303 	adc.w	r3, r5, r3
 8002f1c:	607b      	str	r3, [r7, #4]
 8002f1e:	f04f 0200 	mov.w	r2, #0
 8002f22:	f04f 0300 	mov.w	r3, #0
 8002f26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f2a:	4629      	mov	r1, r5
 8002f2c:	028b      	lsls	r3, r1, #10
 8002f2e:	4621      	mov	r1, r4
 8002f30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f34:	4621      	mov	r1, r4
 8002f36:	028a      	lsls	r2, r1, #10
 8002f38:	4610      	mov	r0, r2
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f3e:	2200      	movs	r2, #0
 8002f40:	61bb      	str	r3, [r7, #24]
 8002f42:	61fa      	str	r2, [r7, #28]
 8002f44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f48:	f7fd fdaa 	bl	8000aa0 <__aeabi_uldivmod>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	460b      	mov	r3, r1
 8002f50:	4613      	mov	r3, r2
 8002f52:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f54:	4b0b      	ldr	r3, [pc, #44]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	0c1b      	lsrs	r3, r3, #16
 8002f5a:	f003 0303 	and.w	r3, r3, #3
 8002f5e:	3301      	adds	r3, #1
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002f64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f6e:	e002      	b.n	8002f76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f70:	4b05      	ldr	r3, [pc, #20]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f72:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3750      	adds	r7, #80	; 0x50
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f82:	bf00      	nop
 8002f84:	40023800 	.word	0x40023800
 8002f88:	00f42400 	.word	0x00f42400
 8002f8c:	007a1200 	.word	0x007a1200

08002f90 <memset>:
 8002f90:	4402      	add	r2, r0
 8002f92:	4603      	mov	r3, r0
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d100      	bne.n	8002f9a <memset+0xa>
 8002f98:	4770      	bx	lr
 8002f9a:	f803 1b01 	strb.w	r1, [r3], #1
 8002f9e:	e7f9      	b.n	8002f94 <memset+0x4>

08002fa0 <__errno>:
 8002fa0:	4b01      	ldr	r3, [pc, #4]	; (8002fa8 <__errno+0x8>)
 8002fa2:	6818      	ldr	r0, [r3, #0]
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	20000058 	.word	0x20000058

08002fac <__libc_init_array>:
 8002fac:	b570      	push	{r4, r5, r6, lr}
 8002fae:	4d0d      	ldr	r5, [pc, #52]	; (8002fe4 <__libc_init_array+0x38>)
 8002fb0:	4c0d      	ldr	r4, [pc, #52]	; (8002fe8 <__libc_init_array+0x3c>)
 8002fb2:	1b64      	subs	r4, r4, r5
 8002fb4:	10a4      	asrs	r4, r4, #2
 8002fb6:	2600      	movs	r6, #0
 8002fb8:	42a6      	cmp	r6, r4
 8002fba:	d109      	bne.n	8002fd0 <__libc_init_array+0x24>
 8002fbc:	4d0b      	ldr	r5, [pc, #44]	; (8002fec <__libc_init_array+0x40>)
 8002fbe:	4c0c      	ldr	r4, [pc, #48]	; (8002ff0 <__libc_init_array+0x44>)
 8002fc0:	f000 ff52 	bl	8003e68 <_init>
 8002fc4:	1b64      	subs	r4, r4, r5
 8002fc6:	10a4      	asrs	r4, r4, #2
 8002fc8:	2600      	movs	r6, #0
 8002fca:	42a6      	cmp	r6, r4
 8002fcc:	d105      	bne.n	8002fda <__libc_init_array+0x2e>
 8002fce:	bd70      	pop	{r4, r5, r6, pc}
 8002fd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fd4:	4798      	blx	r3
 8002fd6:	3601      	adds	r6, #1
 8002fd8:	e7ee      	b.n	8002fb8 <__libc_init_array+0xc>
 8002fda:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fde:	4798      	blx	r3
 8002fe0:	3601      	adds	r6, #1
 8002fe2:	e7f2      	b.n	8002fca <__libc_init_array+0x1e>
 8002fe4:	08003ef0 	.word	0x08003ef0
 8002fe8:	08003ef0 	.word	0x08003ef0
 8002fec:	08003ef0 	.word	0x08003ef0
 8002ff0:	08003ef4 	.word	0x08003ef4

08002ff4 <pow>:
 8002ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ff6:	ed2d 8b02 	vpush	{d8}
 8002ffa:	eeb0 8a40 	vmov.f32	s16, s0
 8002ffe:	eef0 8a60 	vmov.f32	s17, s1
 8003002:	ec55 4b11 	vmov	r4, r5, d1
 8003006:	f000 f873 	bl	80030f0 <__ieee754_pow>
 800300a:	4622      	mov	r2, r4
 800300c:	462b      	mov	r3, r5
 800300e:	4620      	mov	r0, r4
 8003010:	4629      	mov	r1, r5
 8003012:	ec57 6b10 	vmov	r6, r7, d0
 8003016:	f7fd fd2d 	bl	8000a74 <__aeabi_dcmpun>
 800301a:	2800      	cmp	r0, #0
 800301c:	d13b      	bne.n	8003096 <pow+0xa2>
 800301e:	ec51 0b18 	vmov	r0, r1, d8
 8003022:	2200      	movs	r2, #0
 8003024:	2300      	movs	r3, #0
 8003026:	f7fd fcf3 	bl	8000a10 <__aeabi_dcmpeq>
 800302a:	b1b8      	cbz	r0, 800305c <pow+0x68>
 800302c:	2200      	movs	r2, #0
 800302e:	2300      	movs	r3, #0
 8003030:	4620      	mov	r0, r4
 8003032:	4629      	mov	r1, r5
 8003034:	f7fd fcec 	bl	8000a10 <__aeabi_dcmpeq>
 8003038:	2800      	cmp	r0, #0
 800303a:	d146      	bne.n	80030ca <pow+0xd6>
 800303c:	ec45 4b10 	vmov	d0, r4, r5
 8003040:	f000 f848 	bl	80030d4 <finite>
 8003044:	b338      	cbz	r0, 8003096 <pow+0xa2>
 8003046:	2200      	movs	r2, #0
 8003048:	2300      	movs	r3, #0
 800304a:	4620      	mov	r0, r4
 800304c:	4629      	mov	r1, r5
 800304e:	f7fd fce9 	bl	8000a24 <__aeabi_dcmplt>
 8003052:	b300      	cbz	r0, 8003096 <pow+0xa2>
 8003054:	f7ff ffa4 	bl	8002fa0 <__errno>
 8003058:	2322      	movs	r3, #34	; 0x22
 800305a:	e01b      	b.n	8003094 <pow+0xa0>
 800305c:	ec47 6b10 	vmov	d0, r6, r7
 8003060:	f000 f838 	bl	80030d4 <finite>
 8003064:	b9e0      	cbnz	r0, 80030a0 <pow+0xac>
 8003066:	eeb0 0a48 	vmov.f32	s0, s16
 800306a:	eef0 0a68 	vmov.f32	s1, s17
 800306e:	f000 f831 	bl	80030d4 <finite>
 8003072:	b1a8      	cbz	r0, 80030a0 <pow+0xac>
 8003074:	ec45 4b10 	vmov	d0, r4, r5
 8003078:	f000 f82c 	bl	80030d4 <finite>
 800307c:	b180      	cbz	r0, 80030a0 <pow+0xac>
 800307e:	4632      	mov	r2, r6
 8003080:	463b      	mov	r3, r7
 8003082:	4630      	mov	r0, r6
 8003084:	4639      	mov	r1, r7
 8003086:	f7fd fcf5 	bl	8000a74 <__aeabi_dcmpun>
 800308a:	2800      	cmp	r0, #0
 800308c:	d0e2      	beq.n	8003054 <pow+0x60>
 800308e:	f7ff ff87 	bl	8002fa0 <__errno>
 8003092:	2321      	movs	r3, #33	; 0x21
 8003094:	6003      	str	r3, [r0, #0]
 8003096:	ecbd 8b02 	vpop	{d8}
 800309a:	ec47 6b10 	vmov	d0, r6, r7
 800309e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030a0:	2200      	movs	r2, #0
 80030a2:	2300      	movs	r3, #0
 80030a4:	4630      	mov	r0, r6
 80030a6:	4639      	mov	r1, r7
 80030a8:	f7fd fcb2 	bl	8000a10 <__aeabi_dcmpeq>
 80030ac:	2800      	cmp	r0, #0
 80030ae:	d0f2      	beq.n	8003096 <pow+0xa2>
 80030b0:	eeb0 0a48 	vmov.f32	s0, s16
 80030b4:	eef0 0a68 	vmov.f32	s1, s17
 80030b8:	f000 f80c 	bl	80030d4 <finite>
 80030bc:	2800      	cmp	r0, #0
 80030be:	d0ea      	beq.n	8003096 <pow+0xa2>
 80030c0:	ec45 4b10 	vmov	d0, r4, r5
 80030c4:	f000 f806 	bl	80030d4 <finite>
 80030c8:	e7c3      	b.n	8003052 <pow+0x5e>
 80030ca:	4f01      	ldr	r7, [pc, #4]	; (80030d0 <pow+0xdc>)
 80030cc:	2600      	movs	r6, #0
 80030ce:	e7e2      	b.n	8003096 <pow+0xa2>
 80030d0:	3ff00000 	.word	0x3ff00000

080030d4 <finite>:
 80030d4:	b082      	sub	sp, #8
 80030d6:	ed8d 0b00 	vstr	d0, [sp]
 80030da:	9801      	ldr	r0, [sp, #4]
 80030dc:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80030e0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80030e4:	0fc0      	lsrs	r0, r0, #31
 80030e6:	b002      	add	sp, #8
 80030e8:	4770      	bx	lr
 80030ea:	0000      	movs	r0, r0
 80030ec:	0000      	movs	r0, r0
	...

080030f0 <__ieee754_pow>:
 80030f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030f4:	ed2d 8b06 	vpush	{d8-d10}
 80030f8:	b089      	sub	sp, #36	; 0x24
 80030fa:	ed8d 1b00 	vstr	d1, [sp]
 80030fe:	e9dd 2900 	ldrd	r2, r9, [sp]
 8003102:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8003106:	ea58 0102 	orrs.w	r1, r8, r2
 800310a:	ec57 6b10 	vmov	r6, r7, d0
 800310e:	d115      	bne.n	800313c <__ieee754_pow+0x4c>
 8003110:	19b3      	adds	r3, r6, r6
 8003112:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8003116:	4152      	adcs	r2, r2
 8003118:	4299      	cmp	r1, r3
 800311a:	4b89      	ldr	r3, [pc, #548]	; (8003340 <__ieee754_pow+0x250>)
 800311c:	4193      	sbcs	r3, r2
 800311e:	f080 84d1 	bcs.w	8003ac4 <__ieee754_pow+0x9d4>
 8003122:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003126:	4630      	mov	r0, r6
 8003128:	4639      	mov	r1, r7
 800312a:	f7fd f853 	bl	80001d4 <__adddf3>
 800312e:	ec41 0b10 	vmov	d0, r0, r1
 8003132:	b009      	add	sp, #36	; 0x24
 8003134:	ecbd 8b06 	vpop	{d8-d10}
 8003138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800313c:	4b81      	ldr	r3, [pc, #516]	; (8003344 <__ieee754_pow+0x254>)
 800313e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8003142:	429c      	cmp	r4, r3
 8003144:	ee10 aa10 	vmov	sl, s0
 8003148:	463d      	mov	r5, r7
 800314a:	dc06      	bgt.n	800315a <__ieee754_pow+0x6a>
 800314c:	d101      	bne.n	8003152 <__ieee754_pow+0x62>
 800314e:	2e00      	cmp	r6, #0
 8003150:	d1e7      	bne.n	8003122 <__ieee754_pow+0x32>
 8003152:	4598      	cmp	r8, r3
 8003154:	dc01      	bgt.n	800315a <__ieee754_pow+0x6a>
 8003156:	d10f      	bne.n	8003178 <__ieee754_pow+0x88>
 8003158:	b172      	cbz	r2, 8003178 <__ieee754_pow+0x88>
 800315a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800315e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8003162:	ea55 050a 	orrs.w	r5, r5, sl
 8003166:	d1dc      	bne.n	8003122 <__ieee754_pow+0x32>
 8003168:	e9dd 3200 	ldrd	r3, r2, [sp]
 800316c:	18db      	adds	r3, r3, r3
 800316e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8003172:	4152      	adcs	r2, r2
 8003174:	429d      	cmp	r5, r3
 8003176:	e7d0      	b.n	800311a <__ieee754_pow+0x2a>
 8003178:	2d00      	cmp	r5, #0
 800317a:	da3b      	bge.n	80031f4 <__ieee754_pow+0x104>
 800317c:	4b72      	ldr	r3, [pc, #456]	; (8003348 <__ieee754_pow+0x258>)
 800317e:	4598      	cmp	r8, r3
 8003180:	dc51      	bgt.n	8003226 <__ieee754_pow+0x136>
 8003182:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8003186:	4598      	cmp	r8, r3
 8003188:	f340 84ab 	ble.w	8003ae2 <__ieee754_pow+0x9f2>
 800318c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8003190:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003194:	2b14      	cmp	r3, #20
 8003196:	dd0f      	ble.n	80031b8 <__ieee754_pow+0xc8>
 8003198:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800319c:	fa22 f103 	lsr.w	r1, r2, r3
 80031a0:	fa01 f303 	lsl.w	r3, r1, r3
 80031a4:	4293      	cmp	r3, r2
 80031a6:	f040 849c 	bne.w	8003ae2 <__ieee754_pow+0x9f2>
 80031aa:	f001 0101 	and.w	r1, r1, #1
 80031ae:	f1c1 0302 	rsb	r3, r1, #2
 80031b2:	9304      	str	r3, [sp, #16]
 80031b4:	b182      	cbz	r2, 80031d8 <__ieee754_pow+0xe8>
 80031b6:	e05f      	b.n	8003278 <__ieee754_pow+0x188>
 80031b8:	2a00      	cmp	r2, #0
 80031ba:	d15b      	bne.n	8003274 <__ieee754_pow+0x184>
 80031bc:	f1c3 0314 	rsb	r3, r3, #20
 80031c0:	fa48 f103 	asr.w	r1, r8, r3
 80031c4:	fa01 f303 	lsl.w	r3, r1, r3
 80031c8:	4543      	cmp	r3, r8
 80031ca:	f040 8487 	bne.w	8003adc <__ieee754_pow+0x9ec>
 80031ce:	f001 0101 	and.w	r1, r1, #1
 80031d2:	f1c1 0302 	rsb	r3, r1, #2
 80031d6:	9304      	str	r3, [sp, #16]
 80031d8:	4b5c      	ldr	r3, [pc, #368]	; (800334c <__ieee754_pow+0x25c>)
 80031da:	4598      	cmp	r8, r3
 80031dc:	d132      	bne.n	8003244 <__ieee754_pow+0x154>
 80031de:	f1b9 0f00 	cmp.w	r9, #0
 80031e2:	f280 8477 	bge.w	8003ad4 <__ieee754_pow+0x9e4>
 80031e6:	4959      	ldr	r1, [pc, #356]	; (800334c <__ieee754_pow+0x25c>)
 80031e8:	4632      	mov	r2, r6
 80031ea:	463b      	mov	r3, r7
 80031ec:	2000      	movs	r0, #0
 80031ee:	f7fd fad1 	bl	8000794 <__aeabi_ddiv>
 80031f2:	e79c      	b.n	800312e <__ieee754_pow+0x3e>
 80031f4:	2300      	movs	r3, #0
 80031f6:	9304      	str	r3, [sp, #16]
 80031f8:	2a00      	cmp	r2, #0
 80031fa:	d13d      	bne.n	8003278 <__ieee754_pow+0x188>
 80031fc:	4b51      	ldr	r3, [pc, #324]	; (8003344 <__ieee754_pow+0x254>)
 80031fe:	4598      	cmp	r8, r3
 8003200:	d1ea      	bne.n	80031d8 <__ieee754_pow+0xe8>
 8003202:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8003206:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800320a:	ea53 030a 	orrs.w	r3, r3, sl
 800320e:	f000 8459 	beq.w	8003ac4 <__ieee754_pow+0x9d4>
 8003212:	4b4f      	ldr	r3, [pc, #316]	; (8003350 <__ieee754_pow+0x260>)
 8003214:	429c      	cmp	r4, r3
 8003216:	dd08      	ble.n	800322a <__ieee754_pow+0x13a>
 8003218:	f1b9 0f00 	cmp.w	r9, #0
 800321c:	f2c0 8456 	blt.w	8003acc <__ieee754_pow+0x9dc>
 8003220:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003224:	e783      	b.n	800312e <__ieee754_pow+0x3e>
 8003226:	2302      	movs	r3, #2
 8003228:	e7e5      	b.n	80031f6 <__ieee754_pow+0x106>
 800322a:	f1b9 0f00 	cmp.w	r9, #0
 800322e:	f04f 0000 	mov.w	r0, #0
 8003232:	f04f 0100 	mov.w	r1, #0
 8003236:	f6bf af7a 	bge.w	800312e <__ieee754_pow+0x3e>
 800323a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800323e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003242:	e774      	b.n	800312e <__ieee754_pow+0x3e>
 8003244:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8003248:	d106      	bne.n	8003258 <__ieee754_pow+0x168>
 800324a:	4632      	mov	r2, r6
 800324c:	463b      	mov	r3, r7
 800324e:	4630      	mov	r0, r6
 8003250:	4639      	mov	r1, r7
 8003252:	f7fd f975 	bl	8000540 <__aeabi_dmul>
 8003256:	e76a      	b.n	800312e <__ieee754_pow+0x3e>
 8003258:	4b3e      	ldr	r3, [pc, #248]	; (8003354 <__ieee754_pow+0x264>)
 800325a:	4599      	cmp	r9, r3
 800325c:	d10c      	bne.n	8003278 <__ieee754_pow+0x188>
 800325e:	2d00      	cmp	r5, #0
 8003260:	db0a      	blt.n	8003278 <__ieee754_pow+0x188>
 8003262:	ec47 6b10 	vmov	d0, r6, r7
 8003266:	b009      	add	sp, #36	; 0x24
 8003268:	ecbd 8b06 	vpop	{d8-d10}
 800326c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003270:	f000 bd20 	b.w	8003cb4 <__ieee754_sqrt>
 8003274:	2300      	movs	r3, #0
 8003276:	9304      	str	r3, [sp, #16]
 8003278:	ec47 6b10 	vmov	d0, r6, r7
 800327c:	f000 fc62 	bl	8003b44 <fabs>
 8003280:	ec51 0b10 	vmov	r0, r1, d0
 8003284:	f1ba 0f00 	cmp.w	sl, #0
 8003288:	d129      	bne.n	80032de <__ieee754_pow+0x1ee>
 800328a:	b124      	cbz	r4, 8003296 <__ieee754_pow+0x1a6>
 800328c:	4b2f      	ldr	r3, [pc, #188]	; (800334c <__ieee754_pow+0x25c>)
 800328e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8003292:	429a      	cmp	r2, r3
 8003294:	d123      	bne.n	80032de <__ieee754_pow+0x1ee>
 8003296:	f1b9 0f00 	cmp.w	r9, #0
 800329a:	da05      	bge.n	80032a8 <__ieee754_pow+0x1b8>
 800329c:	4602      	mov	r2, r0
 800329e:	460b      	mov	r3, r1
 80032a0:	2000      	movs	r0, #0
 80032a2:	492a      	ldr	r1, [pc, #168]	; (800334c <__ieee754_pow+0x25c>)
 80032a4:	f7fd fa76 	bl	8000794 <__aeabi_ddiv>
 80032a8:	2d00      	cmp	r5, #0
 80032aa:	f6bf af40 	bge.w	800312e <__ieee754_pow+0x3e>
 80032ae:	9b04      	ldr	r3, [sp, #16]
 80032b0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80032b4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80032b8:	431c      	orrs	r4, r3
 80032ba:	d108      	bne.n	80032ce <__ieee754_pow+0x1de>
 80032bc:	4602      	mov	r2, r0
 80032be:	460b      	mov	r3, r1
 80032c0:	4610      	mov	r0, r2
 80032c2:	4619      	mov	r1, r3
 80032c4:	f7fc ff84 	bl	80001d0 <__aeabi_dsub>
 80032c8:	4602      	mov	r2, r0
 80032ca:	460b      	mov	r3, r1
 80032cc:	e78f      	b.n	80031ee <__ieee754_pow+0xfe>
 80032ce:	9b04      	ldr	r3, [sp, #16]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	f47f af2c 	bne.w	800312e <__ieee754_pow+0x3e>
 80032d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80032da:	4619      	mov	r1, r3
 80032dc:	e727      	b.n	800312e <__ieee754_pow+0x3e>
 80032de:	0feb      	lsrs	r3, r5, #31
 80032e0:	3b01      	subs	r3, #1
 80032e2:	9306      	str	r3, [sp, #24]
 80032e4:	9a06      	ldr	r2, [sp, #24]
 80032e6:	9b04      	ldr	r3, [sp, #16]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	d102      	bne.n	80032f2 <__ieee754_pow+0x202>
 80032ec:	4632      	mov	r2, r6
 80032ee:	463b      	mov	r3, r7
 80032f0:	e7e6      	b.n	80032c0 <__ieee754_pow+0x1d0>
 80032f2:	4b19      	ldr	r3, [pc, #100]	; (8003358 <__ieee754_pow+0x268>)
 80032f4:	4598      	cmp	r8, r3
 80032f6:	f340 80fb 	ble.w	80034f0 <__ieee754_pow+0x400>
 80032fa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80032fe:	4598      	cmp	r8, r3
 8003300:	4b13      	ldr	r3, [pc, #76]	; (8003350 <__ieee754_pow+0x260>)
 8003302:	dd0c      	ble.n	800331e <__ieee754_pow+0x22e>
 8003304:	429c      	cmp	r4, r3
 8003306:	dc0f      	bgt.n	8003328 <__ieee754_pow+0x238>
 8003308:	f1b9 0f00 	cmp.w	r9, #0
 800330c:	da0f      	bge.n	800332e <__ieee754_pow+0x23e>
 800330e:	2000      	movs	r0, #0
 8003310:	b009      	add	sp, #36	; 0x24
 8003312:	ecbd 8b06 	vpop	{d8-d10}
 8003316:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800331a:	f000 bcc2 	b.w	8003ca2 <__math_oflow>
 800331e:	429c      	cmp	r4, r3
 8003320:	dbf2      	blt.n	8003308 <__ieee754_pow+0x218>
 8003322:	4b0a      	ldr	r3, [pc, #40]	; (800334c <__ieee754_pow+0x25c>)
 8003324:	429c      	cmp	r4, r3
 8003326:	dd19      	ble.n	800335c <__ieee754_pow+0x26c>
 8003328:	f1b9 0f00 	cmp.w	r9, #0
 800332c:	dcef      	bgt.n	800330e <__ieee754_pow+0x21e>
 800332e:	2000      	movs	r0, #0
 8003330:	b009      	add	sp, #36	; 0x24
 8003332:	ecbd 8b06 	vpop	{d8-d10}
 8003336:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800333a:	f000 bca9 	b.w	8003c90 <__math_uflow>
 800333e:	bf00      	nop
 8003340:	fff00000 	.word	0xfff00000
 8003344:	7ff00000 	.word	0x7ff00000
 8003348:	433fffff 	.word	0x433fffff
 800334c:	3ff00000 	.word	0x3ff00000
 8003350:	3fefffff 	.word	0x3fefffff
 8003354:	3fe00000 	.word	0x3fe00000
 8003358:	41e00000 	.word	0x41e00000
 800335c:	4b60      	ldr	r3, [pc, #384]	; (80034e0 <__ieee754_pow+0x3f0>)
 800335e:	2200      	movs	r2, #0
 8003360:	f7fc ff36 	bl	80001d0 <__aeabi_dsub>
 8003364:	a354      	add	r3, pc, #336	; (adr r3, 80034b8 <__ieee754_pow+0x3c8>)
 8003366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800336a:	4604      	mov	r4, r0
 800336c:	460d      	mov	r5, r1
 800336e:	f7fd f8e7 	bl	8000540 <__aeabi_dmul>
 8003372:	a353      	add	r3, pc, #332	; (adr r3, 80034c0 <__ieee754_pow+0x3d0>)
 8003374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003378:	4606      	mov	r6, r0
 800337a:	460f      	mov	r7, r1
 800337c:	4620      	mov	r0, r4
 800337e:	4629      	mov	r1, r5
 8003380:	f7fd f8de 	bl	8000540 <__aeabi_dmul>
 8003384:	4b57      	ldr	r3, [pc, #348]	; (80034e4 <__ieee754_pow+0x3f4>)
 8003386:	4682      	mov	sl, r0
 8003388:	468b      	mov	fp, r1
 800338a:	2200      	movs	r2, #0
 800338c:	4620      	mov	r0, r4
 800338e:	4629      	mov	r1, r5
 8003390:	f7fd f8d6 	bl	8000540 <__aeabi_dmul>
 8003394:	4602      	mov	r2, r0
 8003396:	460b      	mov	r3, r1
 8003398:	a14b      	add	r1, pc, #300	; (adr r1, 80034c8 <__ieee754_pow+0x3d8>)
 800339a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800339e:	f7fc ff17 	bl	80001d0 <__aeabi_dsub>
 80033a2:	4622      	mov	r2, r4
 80033a4:	462b      	mov	r3, r5
 80033a6:	f7fd f8cb 	bl	8000540 <__aeabi_dmul>
 80033aa:	4602      	mov	r2, r0
 80033ac:	460b      	mov	r3, r1
 80033ae:	2000      	movs	r0, #0
 80033b0:	494d      	ldr	r1, [pc, #308]	; (80034e8 <__ieee754_pow+0x3f8>)
 80033b2:	f7fc ff0d 	bl	80001d0 <__aeabi_dsub>
 80033b6:	4622      	mov	r2, r4
 80033b8:	4680      	mov	r8, r0
 80033ba:	4689      	mov	r9, r1
 80033bc:	462b      	mov	r3, r5
 80033be:	4620      	mov	r0, r4
 80033c0:	4629      	mov	r1, r5
 80033c2:	f7fd f8bd 	bl	8000540 <__aeabi_dmul>
 80033c6:	4602      	mov	r2, r0
 80033c8:	460b      	mov	r3, r1
 80033ca:	4640      	mov	r0, r8
 80033cc:	4649      	mov	r1, r9
 80033ce:	f7fd f8b7 	bl	8000540 <__aeabi_dmul>
 80033d2:	a33f      	add	r3, pc, #252	; (adr r3, 80034d0 <__ieee754_pow+0x3e0>)
 80033d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d8:	f7fd f8b2 	bl	8000540 <__aeabi_dmul>
 80033dc:	4602      	mov	r2, r0
 80033de:	460b      	mov	r3, r1
 80033e0:	4650      	mov	r0, sl
 80033e2:	4659      	mov	r1, fp
 80033e4:	f7fc fef4 	bl	80001d0 <__aeabi_dsub>
 80033e8:	4602      	mov	r2, r0
 80033ea:	460b      	mov	r3, r1
 80033ec:	4680      	mov	r8, r0
 80033ee:	4689      	mov	r9, r1
 80033f0:	4630      	mov	r0, r6
 80033f2:	4639      	mov	r1, r7
 80033f4:	f7fc feee 	bl	80001d4 <__adddf3>
 80033f8:	2000      	movs	r0, #0
 80033fa:	4632      	mov	r2, r6
 80033fc:	463b      	mov	r3, r7
 80033fe:	4604      	mov	r4, r0
 8003400:	460d      	mov	r5, r1
 8003402:	f7fc fee5 	bl	80001d0 <__aeabi_dsub>
 8003406:	4602      	mov	r2, r0
 8003408:	460b      	mov	r3, r1
 800340a:	4640      	mov	r0, r8
 800340c:	4649      	mov	r1, r9
 800340e:	f7fc fedf 	bl	80001d0 <__aeabi_dsub>
 8003412:	9b04      	ldr	r3, [sp, #16]
 8003414:	9a06      	ldr	r2, [sp, #24]
 8003416:	3b01      	subs	r3, #1
 8003418:	4313      	orrs	r3, r2
 800341a:	4682      	mov	sl, r0
 800341c:	468b      	mov	fp, r1
 800341e:	f040 81e7 	bne.w	80037f0 <__ieee754_pow+0x700>
 8003422:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80034d8 <__ieee754_pow+0x3e8>
 8003426:	eeb0 8a47 	vmov.f32	s16, s14
 800342a:	eef0 8a67 	vmov.f32	s17, s15
 800342e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003432:	2600      	movs	r6, #0
 8003434:	4632      	mov	r2, r6
 8003436:	463b      	mov	r3, r7
 8003438:	e9dd 0100 	ldrd	r0, r1, [sp]
 800343c:	f7fc fec8 	bl	80001d0 <__aeabi_dsub>
 8003440:	4622      	mov	r2, r4
 8003442:	462b      	mov	r3, r5
 8003444:	f7fd f87c 	bl	8000540 <__aeabi_dmul>
 8003448:	e9dd 2300 	ldrd	r2, r3, [sp]
 800344c:	4680      	mov	r8, r0
 800344e:	4689      	mov	r9, r1
 8003450:	4650      	mov	r0, sl
 8003452:	4659      	mov	r1, fp
 8003454:	f7fd f874 	bl	8000540 <__aeabi_dmul>
 8003458:	4602      	mov	r2, r0
 800345a:	460b      	mov	r3, r1
 800345c:	4640      	mov	r0, r8
 800345e:	4649      	mov	r1, r9
 8003460:	f7fc feb8 	bl	80001d4 <__adddf3>
 8003464:	4632      	mov	r2, r6
 8003466:	463b      	mov	r3, r7
 8003468:	4680      	mov	r8, r0
 800346a:	4689      	mov	r9, r1
 800346c:	4620      	mov	r0, r4
 800346e:	4629      	mov	r1, r5
 8003470:	f7fd f866 	bl	8000540 <__aeabi_dmul>
 8003474:	460b      	mov	r3, r1
 8003476:	4604      	mov	r4, r0
 8003478:	460d      	mov	r5, r1
 800347a:	4602      	mov	r2, r0
 800347c:	4649      	mov	r1, r9
 800347e:	4640      	mov	r0, r8
 8003480:	f7fc fea8 	bl	80001d4 <__adddf3>
 8003484:	4b19      	ldr	r3, [pc, #100]	; (80034ec <__ieee754_pow+0x3fc>)
 8003486:	4299      	cmp	r1, r3
 8003488:	ec45 4b19 	vmov	d9, r4, r5
 800348c:	4606      	mov	r6, r0
 800348e:	460f      	mov	r7, r1
 8003490:	468b      	mov	fp, r1
 8003492:	f340 82f0 	ble.w	8003a76 <__ieee754_pow+0x986>
 8003496:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800349a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800349e:	4303      	orrs	r3, r0
 80034a0:	f000 81e4 	beq.w	800386c <__ieee754_pow+0x77c>
 80034a4:	ec51 0b18 	vmov	r0, r1, d8
 80034a8:	2200      	movs	r2, #0
 80034aa:	2300      	movs	r3, #0
 80034ac:	f7fd faba 	bl	8000a24 <__aeabi_dcmplt>
 80034b0:	3800      	subs	r0, #0
 80034b2:	bf18      	it	ne
 80034b4:	2001      	movne	r0, #1
 80034b6:	e72b      	b.n	8003310 <__ieee754_pow+0x220>
 80034b8:	60000000 	.word	0x60000000
 80034bc:	3ff71547 	.word	0x3ff71547
 80034c0:	f85ddf44 	.word	0xf85ddf44
 80034c4:	3e54ae0b 	.word	0x3e54ae0b
 80034c8:	55555555 	.word	0x55555555
 80034cc:	3fd55555 	.word	0x3fd55555
 80034d0:	652b82fe 	.word	0x652b82fe
 80034d4:	3ff71547 	.word	0x3ff71547
 80034d8:	00000000 	.word	0x00000000
 80034dc:	bff00000 	.word	0xbff00000
 80034e0:	3ff00000 	.word	0x3ff00000
 80034e4:	3fd00000 	.word	0x3fd00000
 80034e8:	3fe00000 	.word	0x3fe00000
 80034ec:	408fffff 	.word	0x408fffff
 80034f0:	4bd5      	ldr	r3, [pc, #852]	; (8003848 <__ieee754_pow+0x758>)
 80034f2:	402b      	ands	r3, r5
 80034f4:	2200      	movs	r2, #0
 80034f6:	b92b      	cbnz	r3, 8003504 <__ieee754_pow+0x414>
 80034f8:	4bd4      	ldr	r3, [pc, #848]	; (800384c <__ieee754_pow+0x75c>)
 80034fa:	f7fd f821 	bl	8000540 <__aeabi_dmul>
 80034fe:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8003502:	460c      	mov	r4, r1
 8003504:	1523      	asrs	r3, r4, #20
 8003506:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800350a:	4413      	add	r3, r2
 800350c:	9305      	str	r3, [sp, #20]
 800350e:	4bd0      	ldr	r3, [pc, #832]	; (8003850 <__ieee754_pow+0x760>)
 8003510:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8003514:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8003518:	429c      	cmp	r4, r3
 800351a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800351e:	dd08      	ble.n	8003532 <__ieee754_pow+0x442>
 8003520:	4bcc      	ldr	r3, [pc, #816]	; (8003854 <__ieee754_pow+0x764>)
 8003522:	429c      	cmp	r4, r3
 8003524:	f340 8162 	ble.w	80037ec <__ieee754_pow+0x6fc>
 8003528:	9b05      	ldr	r3, [sp, #20]
 800352a:	3301      	adds	r3, #1
 800352c:	9305      	str	r3, [sp, #20]
 800352e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8003532:	2400      	movs	r4, #0
 8003534:	00e3      	lsls	r3, r4, #3
 8003536:	9307      	str	r3, [sp, #28]
 8003538:	4bc7      	ldr	r3, [pc, #796]	; (8003858 <__ieee754_pow+0x768>)
 800353a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800353e:	ed93 7b00 	vldr	d7, [r3]
 8003542:	4629      	mov	r1, r5
 8003544:	ec53 2b17 	vmov	r2, r3, d7
 8003548:	eeb0 9a47 	vmov.f32	s18, s14
 800354c:	eef0 9a67 	vmov.f32	s19, s15
 8003550:	4682      	mov	sl, r0
 8003552:	f7fc fe3d 	bl	80001d0 <__aeabi_dsub>
 8003556:	4652      	mov	r2, sl
 8003558:	4606      	mov	r6, r0
 800355a:	460f      	mov	r7, r1
 800355c:	462b      	mov	r3, r5
 800355e:	ec51 0b19 	vmov	r0, r1, d9
 8003562:	f7fc fe37 	bl	80001d4 <__adddf3>
 8003566:	4602      	mov	r2, r0
 8003568:	460b      	mov	r3, r1
 800356a:	2000      	movs	r0, #0
 800356c:	49bb      	ldr	r1, [pc, #748]	; (800385c <__ieee754_pow+0x76c>)
 800356e:	f7fd f911 	bl	8000794 <__aeabi_ddiv>
 8003572:	ec41 0b1a 	vmov	d10, r0, r1
 8003576:	4602      	mov	r2, r0
 8003578:	460b      	mov	r3, r1
 800357a:	4630      	mov	r0, r6
 800357c:	4639      	mov	r1, r7
 800357e:	f7fc ffdf 	bl	8000540 <__aeabi_dmul>
 8003582:	2300      	movs	r3, #0
 8003584:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003588:	9302      	str	r3, [sp, #8]
 800358a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800358e:	46ab      	mov	fp, r5
 8003590:	106d      	asrs	r5, r5, #1
 8003592:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8003596:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800359a:	ec41 0b18 	vmov	d8, r0, r1
 800359e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80035a2:	2200      	movs	r2, #0
 80035a4:	4640      	mov	r0, r8
 80035a6:	4649      	mov	r1, r9
 80035a8:	4614      	mov	r4, r2
 80035aa:	461d      	mov	r5, r3
 80035ac:	f7fc ffc8 	bl	8000540 <__aeabi_dmul>
 80035b0:	4602      	mov	r2, r0
 80035b2:	460b      	mov	r3, r1
 80035b4:	4630      	mov	r0, r6
 80035b6:	4639      	mov	r1, r7
 80035b8:	f7fc fe0a 	bl	80001d0 <__aeabi_dsub>
 80035bc:	ec53 2b19 	vmov	r2, r3, d9
 80035c0:	4606      	mov	r6, r0
 80035c2:	460f      	mov	r7, r1
 80035c4:	4620      	mov	r0, r4
 80035c6:	4629      	mov	r1, r5
 80035c8:	f7fc fe02 	bl	80001d0 <__aeabi_dsub>
 80035cc:	4602      	mov	r2, r0
 80035ce:	460b      	mov	r3, r1
 80035d0:	4650      	mov	r0, sl
 80035d2:	4659      	mov	r1, fp
 80035d4:	f7fc fdfc 	bl	80001d0 <__aeabi_dsub>
 80035d8:	4642      	mov	r2, r8
 80035da:	464b      	mov	r3, r9
 80035dc:	f7fc ffb0 	bl	8000540 <__aeabi_dmul>
 80035e0:	4602      	mov	r2, r0
 80035e2:	460b      	mov	r3, r1
 80035e4:	4630      	mov	r0, r6
 80035e6:	4639      	mov	r1, r7
 80035e8:	f7fc fdf2 	bl	80001d0 <__aeabi_dsub>
 80035ec:	ec53 2b1a 	vmov	r2, r3, d10
 80035f0:	f7fc ffa6 	bl	8000540 <__aeabi_dmul>
 80035f4:	ec53 2b18 	vmov	r2, r3, d8
 80035f8:	ec41 0b19 	vmov	d9, r0, r1
 80035fc:	ec51 0b18 	vmov	r0, r1, d8
 8003600:	f7fc ff9e 	bl	8000540 <__aeabi_dmul>
 8003604:	a37c      	add	r3, pc, #496	; (adr r3, 80037f8 <__ieee754_pow+0x708>)
 8003606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800360a:	4604      	mov	r4, r0
 800360c:	460d      	mov	r5, r1
 800360e:	f7fc ff97 	bl	8000540 <__aeabi_dmul>
 8003612:	a37b      	add	r3, pc, #492	; (adr r3, 8003800 <__ieee754_pow+0x710>)
 8003614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003618:	f7fc fddc 	bl	80001d4 <__adddf3>
 800361c:	4622      	mov	r2, r4
 800361e:	462b      	mov	r3, r5
 8003620:	f7fc ff8e 	bl	8000540 <__aeabi_dmul>
 8003624:	a378      	add	r3, pc, #480	; (adr r3, 8003808 <__ieee754_pow+0x718>)
 8003626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800362a:	f7fc fdd3 	bl	80001d4 <__adddf3>
 800362e:	4622      	mov	r2, r4
 8003630:	462b      	mov	r3, r5
 8003632:	f7fc ff85 	bl	8000540 <__aeabi_dmul>
 8003636:	a376      	add	r3, pc, #472	; (adr r3, 8003810 <__ieee754_pow+0x720>)
 8003638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800363c:	f7fc fdca 	bl	80001d4 <__adddf3>
 8003640:	4622      	mov	r2, r4
 8003642:	462b      	mov	r3, r5
 8003644:	f7fc ff7c 	bl	8000540 <__aeabi_dmul>
 8003648:	a373      	add	r3, pc, #460	; (adr r3, 8003818 <__ieee754_pow+0x728>)
 800364a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800364e:	f7fc fdc1 	bl	80001d4 <__adddf3>
 8003652:	4622      	mov	r2, r4
 8003654:	462b      	mov	r3, r5
 8003656:	f7fc ff73 	bl	8000540 <__aeabi_dmul>
 800365a:	a371      	add	r3, pc, #452	; (adr r3, 8003820 <__ieee754_pow+0x730>)
 800365c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003660:	f7fc fdb8 	bl	80001d4 <__adddf3>
 8003664:	4622      	mov	r2, r4
 8003666:	4606      	mov	r6, r0
 8003668:	460f      	mov	r7, r1
 800366a:	462b      	mov	r3, r5
 800366c:	4620      	mov	r0, r4
 800366e:	4629      	mov	r1, r5
 8003670:	f7fc ff66 	bl	8000540 <__aeabi_dmul>
 8003674:	4602      	mov	r2, r0
 8003676:	460b      	mov	r3, r1
 8003678:	4630      	mov	r0, r6
 800367a:	4639      	mov	r1, r7
 800367c:	f7fc ff60 	bl	8000540 <__aeabi_dmul>
 8003680:	4642      	mov	r2, r8
 8003682:	4604      	mov	r4, r0
 8003684:	460d      	mov	r5, r1
 8003686:	464b      	mov	r3, r9
 8003688:	ec51 0b18 	vmov	r0, r1, d8
 800368c:	f7fc fda2 	bl	80001d4 <__adddf3>
 8003690:	ec53 2b19 	vmov	r2, r3, d9
 8003694:	f7fc ff54 	bl	8000540 <__aeabi_dmul>
 8003698:	4622      	mov	r2, r4
 800369a:	462b      	mov	r3, r5
 800369c:	f7fc fd9a 	bl	80001d4 <__adddf3>
 80036a0:	4642      	mov	r2, r8
 80036a2:	4682      	mov	sl, r0
 80036a4:	468b      	mov	fp, r1
 80036a6:	464b      	mov	r3, r9
 80036a8:	4640      	mov	r0, r8
 80036aa:	4649      	mov	r1, r9
 80036ac:	f7fc ff48 	bl	8000540 <__aeabi_dmul>
 80036b0:	4b6b      	ldr	r3, [pc, #428]	; (8003860 <__ieee754_pow+0x770>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	4606      	mov	r6, r0
 80036b6:	460f      	mov	r7, r1
 80036b8:	f7fc fd8c 	bl	80001d4 <__adddf3>
 80036bc:	4652      	mov	r2, sl
 80036be:	465b      	mov	r3, fp
 80036c0:	f7fc fd88 	bl	80001d4 <__adddf3>
 80036c4:	2000      	movs	r0, #0
 80036c6:	4604      	mov	r4, r0
 80036c8:	460d      	mov	r5, r1
 80036ca:	4602      	mov	r2, r0
 80036cc:	460b      	mov	r3, r1
 80036ce:	4640      	mov	r0, r8
 80036d0:	4649      	mov	r1, r9
 80036d2:	f7fc ff35 	bl	8000540 <__aeabi_dmul>
 80036d6:	4b62      	ldr	r3, [pc, #392]	; (8003860 <__ieee754_pow+0x770>)
 80036d8:	4680      	mov	r8, r0
 80036da:	4689      	mov	r9, r1
 80036dc:	2200      	movs	r2, #0
 80036de:	4620      	mov	r0, r4
 80036e0:	4629      	mov	r1, r5
 80036e2:	f7fc fd75 	bl	80001d0 <__aeabi_dsub>
 80036e6:	4632      	mov	r2, r6
 80036e8:	463b      	mov	r3, r7
 80036ea:	f7fc fd71 	bl	80001d0 <__aeabi_dsub>
 80036ee:	4602      	mov	r2, r0
 80036f0:	460b      	mov	r3, r1
 80036f2:	4650      	mov	r0, sl
 80036f4:	4659      	mov	r1, fp
 80036f6:	f7fc fd6b 	bl	80001d0 <__aeabi_dsub>
 80036fa:	ec53 2b18 	vmov	r2, r3, d8
 80036fe:	f7fc ff1f 	bl	8000540 <__aeabi_dmul>
 8003702:	4622      	mov	r2, r4
 8003704:	4606      	mov	r6, r0
 8003706:	460f      	mov	r7, r1
 8003708:	462b      	mov	r3, r5
 800370a:	ec51 0b19 	vmov	r0, r1, d9
 800370e:	f7fc ff17 	bl	8000540 <__aeabi_dmul>
 8003712:	4602      	mov	r2, r0
 8003714:	460b      	mov	r3, r1
 8003716:	4630      	mov	r0, r6
 8003718:	4639      	mov	r1, r7
 800371a:	f7fc fd5b 	bl	80001d4 <__adddf3>
 800371e:	4606      	mov	r6, r0
 8003720:	460f      	mov	r7, r1
 8003722:	4602      	mov	r2, r0
 8003724:	460b      	mov	r3, r1
 8003726:	4640      	mov	r0, r8
 8003728:	4649      	mov	r1, r9
 800372a:	f7fc fd53 	bl	80001d4 <__adddf3>
 800372e:	a33e      	add	r3, pc, #248	; (adr r3, 8003828 <__ieee754_pow+0x738>)
 8003730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003734:	2000      	movs	r0, #0
 8003736:	4604      	mov	r4, r0
 8003738:	460d      	mov	r5, r1
 800373a:	f7fc ff01 	bl	8000540 <__aeabi_dmul>
 800373e:	4642      	mov	r2, r8
 8003740:	ec41 0b18 	vmov	d8, r0, r1
 8003744:	464b      	mov	r3, r9
 8003746:	4620      	mov	r0, r4
 8003748:	4629      	mov	r1, r5
 800374a:	f7fc fd41 	bl	80001d0 <__aeabi_dsub>
 800374e:	4602      	mov	r2, r0
 8003750:	460b      	mov	r3, r1
 8003752:	4630      	mov	r0, r6
 8003754:	4639      	mov	r1, r7
 8003756:	f7fc fd3b 	bl	80001d0 <__aeabi_dsub>
 800375a:	a335      	add	r3, pc, #212	; (adr r3, 8003830 <__ieee754_pow+0x740>)
 800375c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003760:	f7fc feee 	bl	8000540 <__aeabi_dmul>
 8003764:	a334      	add	r3, pc, #208	; (adr r3, 8003838 <__ieee754_pow+0x748>)
 8003766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800376a:	4606      	mov	r6, r0
 800376c:	460f      	mov	r7, r1
 800376e:	4620      	mov	r0, r4
 8003770:	4629      	mov	r1, r5
 8003772:	f7fc fee5 	bl	8000540 <__aeabi_dmul>
 8003776:	4602      	mov	r2, r0
 8003778:	460b      	mov	r3, r1
 800377a:	4630      	mov	r0, r6
 800377c:	4639      	mov	r1, r7
 800377e:	f7fc fd29 	bl	80001d4 <__adddf3>
 8003782:	9a07      	ldr	r2, [sp, #28]
 8003784:	4b37      	ldr	r3, [pc, #220]	; (8003864 <__ieee754_pow+0x774>)
 8003786:	4413      	add	r3, r2
 8003788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800378c:	f7fc fd22 	bl	80001d4 <__adddf3>
 8003790:	4682      	mov	sl, r0
 8003792:	9805      	ldr	r0, [sp, #20]
 8003794:	468b      	mov	fp, r1
 8003796:	f7fc fe69 	bl	800046c <__aeabi_i2d>
 800379a:	9a07      	ldr	r2, [sp, #28]
 800379c:	4b32      	ldr	r3, [pc, #200]	; (8003868 <__ieee754_pow+0x778>)
 800379e:	4413      	add	r3, r2
 80037a0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80037a4:	4606      	mov	r6, r0
 80037a6:	460f      	mov	r7, r1
 80037a8:	4652      	mov	r2, sl
 80037aa:	465b      	mov	r3, fp
 80037ac:	ec51 0b18 	vmov	r0, r1, d8
 80037b0:	f7fc fd10 	bl	80001d4 <__adddf3>
 80037b4:	4642      	mov	r2, r8
 80037b6:	464b      	mov	r3, r9
 80037b8:	f7fc fd0c 	bl	80001d4 <__adddf3>
 80037bc:	4632      	mov	r2, r6
 80037be:	463b      	mov	r3, r7
 80037c0:	f7fc fd08 	bl	80001d4 <__adddf3>
 80037c4:	2000      	movs	r0, #0
 80037c6:	4632      	mov	r2, r6
 80037c8:	463b      	mov	r3, r7
 80037ca:	4604      	mov	r4, r0
 80037cc:	460d      	mov	r5, r1
 80037ce:	f7fc fcff 	bl	80001d0 <__aeabi_dsub>
 80037d2:	4642      	mov	r2, r8
 80037d4:	464b      	mov	r3, r9
 80037d6:	f7fc fcfb 	bl	80001d0 <__aeabi_dsub>
 80037da:	ec53 2b18 	vmov	r2, r3, d8
 80037de:	f7fc fcf7 	bl	80001d0 <__aeabi_dsub>
 80037e2:	4602      	mov	r2, r0
 80037e4:	460b      	mov	r3, r1
 80037e6:	4650      	mov	r0, sl
 80037e8:	4659      	mov	r1, fp
 80037ea:	e610      	b.n	800340e <__ieee754_pow+0x31e>
 80037ec:	2401      	movs	r4, #1
 80037ee:	e6a1      	b.n	8003534 <__ieee754_pow+0x444>
 80037f0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8003840 <__ieee754_pow+0x750>
 80037f4:	e617      	b.n	8003426 <__ieee754_pow+0x336>
 80037f6:	bf00      	nop
 80037f8:	4a454eef 	.word	0x4a454eef
 80037fc:	3fca7e28 	.word	0x3fca7e28
 8003800:	93c9db65 	.word	0x93c9db65
 8003804:	3fcd864a 	.word	0x3fcd864a
 8003808:	a91d4101 	.word	0xa91d4101
 800380c:	3fd17460 	.word	0x3fd17460
 8003810:	518f264d 	.word	0x518f264d
 8003814:	3fd55555 	.word	0x3fd55555
 8003818:	db6fabff 	.word	0xdb6fabff
 800381c:	3fdb6db6 	.word	0x3fdb6db6
 8003820:	33333303 	.word	0x33333303
 8003824:	3fe33333 	.word	0x3fe33333
 8003828:	e0000000 	.word	0xe0000000
 800382c:	3feec709 	.word	0x3feec709
 8003830:	dc3a03fd 	.word	0xdc3a03fd
 8003834:	3feec709 	.word	0x3feec709
 8003838:	145b01f5 	.word	0x145b01f5
 800383c:	be3e2fe0 	.word	0xbe3e2fe0
 8003840:	00000000 	.word	0x00000000
 8003844:	3ff00000 	.word	0x3ff00000
 8003848:	7ff00000 	.word	0x7ff00000
 800384c:	43400000 	.word	0x43400000
 8003850:	0003988e 	.word	0x0003988e
 8003854:	000bb679 	.word	0x000bb679
 8003858:	08003eb8 	.word	0x08003eb8
 800385c:	3ff00000 	.word	0x3ff00000
 8003860:	40080000 	.word	0x40080000
 8003864:	08003ed8 	.word	0x08003ed8
 8003868:	08003ec8 	.word	0x08003ec8
 800386c:	a3b3      	add	r3, pc, #716	; (adr r3, 8003b3c <__ieee754_pow+0xa4c>)
 800386e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003872:	4640      	mov	r0, r8
 8003874:	4649      	mov	r1, r9
 8003876:	f7fc fcad 	bl	80001d4 <__adddf3>
 800387a:	4622      	mov	r2, r4
 800387c:	ec41 0b1a 	vmov	d10, r0, r1
 8003880:	462b      	mov	r3, r5
 8003882:	4630      	mov	r0, r6
 8003884:	4639      	mov	r1, r7
 8003886:	f7fc fca3 	bl	80001d0 <__aeabi_dsub>
 800388a:	4602      	mov	r2, r0
 800388c:	460b      	mov	r3, r1
 800388e:	ec51 0b1a 	vmov	r0, r1, d10
 8003892:	f7fd f8e5 	bl	8000a60 <__aeabi_dcmpgt>
 8003896:	2800      	cmp	r0, #0
 8003898:	f47f ae04 	bne.w	80034a4 <__ieee754_pow+0x3b4>
 800389c:	4aa2      	ldr	r2, [pc, #648]	; (8003b28 <__ieee754_pow+0xa38>)
 800389e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80038a2:	4293      	cmp	r3, r2
 80038a4:	f340 8107 	ble.w	8003ab6 <__ieee754_pow+0x9c6>
 80038a8:	151b      	asrs	r3, r3, #20
 80038aa:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80038ae:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80038b2:	fa4a fa03 	asr.w	sl, sl, r3
 80038b6:	44da      	add	sl, fp
 80038b8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80038bc:	489b      	ldr	r0, [pc, #620]	; (8003b2c <__ieee754_pow+0xa3c>)
 80038be:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80038c2:	4108      	asrs	r0, r1
 80038c4:	ea00 030a 	and.w	r3, r0, sl
 80038c8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80038cc:	f1c1 0114 	rsb	r1, r1, #20
 80038d0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80038d4:	fa4a fa01 	asr.w	sl, sl, r1
 80038d8:	f1bb 0f00 	cmp.w	fp, #0
 80038dc:	f04f 0200 	mov.w	r2, #0
 80038e0:	4620      	mov	r0, r4
 80038e2:	4629      	mov	r1, r5
 80038e4:	bfb8      	it	lt
 80038e6:	f1ca 0a00 	rsblt	sl, sl, #0
 80038ea:	f7fc fc71 	bl	80001d0 <__aeabi_dsub>
 80038ee:	ec41 0b19 	vmov	d9, r0, r1
 80038f2:	4642      	mov	r2, r8
 80038f4:	464b      	mov	r3, r9
 80038f6:	ec51 0b19 	vmov	r0, r1, d9
 80038fa:	f7fc fc6b 	bl	80001d4 <__adddf3>
 80038fe:	a37a      	add	r3, pc, #488	; (adr r3, 8003ae8 <__ieee754_pow+0x9f8>)
 8003900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003904:	2000      	movs	r0, #0
 8003906:	4604      	mov	r4, r0
 8003908:	460d      	mov	r5, r1
 800390a:	f7fc fe19 	bl	8000540 <__aeabi_dmul>
 800390e:	ec53 2b19 	vmov	r2, r3, d9
 8003912:	4606      	mov	r6, r0
 8003914:	460f      	mov	r7, r1
 8003916:	4620      	mov	r0, r4
 8003918:	4629      	mov	r1, r5
 800391a:	f7fc fc59 	bl	80001d0 <__aeabi_dsub>
 800391e:	4602      	mov	r2, r0
 8003920:	460b      	mov	r3, r1
 8003922:	4640      	mov	r0, r8
 8003924:	4649      	mov	r1, r9
 8003926:	f7fc fc53 	bl	80001d0 <__aeabi_dsub>
 800392a:	a371      	add	r3, pc, #452	; (adr r3, 8003af0 <__ieee754_pow+0xa00>)
 800392c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003930:	f7fc fe06 	bl	8000540 <__aeabi_dmul>
 8003934:	a370      	add	r3, pc, #448	; (adr r3, 8003af8 <__ieee754_pow+0xa08>)
 8003936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800393a:	4680      	mov	r8, r0
 800393c:	4689      	mov	r9, r1
 800393e:	4620      	mov	r0, r4
 8003940:	4629      	mov	r1, r5
 8003942:	f7fc fdfd 	bl	8000540 <__aeabi_dmul>
 8003946:	4602      	mov	r2, r0
 8003948:	460b      	mov	r3, r1
 800394a:	4640      	mov	r0, r8
 800394c:	4649      	mov	r1, r9
 800394e:	f7fc fc41 	bl	80001d4 <__adddf3>
 8003952:	4604      	mov	r4, r0
 8003954:	460d      	mov	r5, r1
 8003956:	4602      	mov	r2, r0
 8003958:	460b      	mov	r3, r1
 800395a:	4630      	mov	r0, r6
 800395c:	4639      	mov	r1, r7
 800395e:	f7fc fc39 	bl	80001d4 <__adddf3>
 8003962:	4632      	mov	r2, r6
 8003964:	463b      	mov	r3, r7
 8003966:	4680      	mov	r8, r0
 8003968:	4689      	mov	r9, r1
 800396a:	f7fc fc31 	bl	80001d0 <__aeabi_dsub>
 800396e:	4602      	mov	r2, r0
 8003970:	460b      	mov	r3, r1
 8003972:	4620      	mov	r0, r4
 8003974:	4629      	mov	r1, r5
 8003976:	f7fc fc2b 	bl	80001d0 <__aeabi_dsub>
 800397a:	4642      	mov	r2, r8
 800397c:	4606      	mov	r6, r0
 800397e:	460f      	mov	r7, r1
 8003980:	464b      	mov	r3, r9
 8003982:	4640      	mov	r0, r8
 8003984:	4649      	mov	r1, r9
 8003986:	f7fc fddb 	bl	8000540 <__aeabi_dmul>
 800398a:	a35d      	add	r3, pc, #372	; (adr r3, 8003b00 <__ieee754_pow+0xa10>)
 800398c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003990:	4604      	mov	r4, r0
 8003992:	460d      	mov	r5, r1
 8003994:	f7fc fdd4 	bl	8000540 <__aeabi_dmul>
 8003998:	a35b      	add	r3, pc, #364	; (adr r3, 8003b08 <__ieee754_pow+0xa18>)
 800399a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800399e:	f7fc fc17 	bl	80001d0 <__aeabi_dsub>
 80039a2:	4622      	mov	r2, r4
 80039a4:	462b      	mov	r3, r5
 80039a6:	f7fc fdcb 	bl	8000540 <__aeabi_dmul>
 80039aa:	a359      	add	r3, pc, #356	; (adr r3, 8003b10 <__ieee754_pow+0xa20>)
 80039ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b0:	f7fc fc10 	bl	80001d4 <__adddf3>
 80039b4:	4622      	mov	r2, r4
 80039b6:	462b      	mov	r3, r5
 80039b8:	f7fc fdc2 	bl	8000540 <__aeabi_dmul>
 80039bc:	a356      	add	r3, pc, #344	; (adr r3, 8003b18 <__ieee754_pow+0xa28>)
 80039be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c2:	f7fc fc05 	bl	80001d0 <__aeabi_dsub>
 80039c6:	4622      	mov	r2, r4
 80039c8:	462b      	mov	r3, r5
 80039ca:	f7fc fdb9 	bl	8000540 <__aeabi_dmul>
 80039ce:	a354      	add	r3, pc, #336	; (adr r3, 8003b20 <__ieee754_pow+0xa30>)
 80039d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d4:	f7fc fbfe 	bl	80001d4 <__adddf3>
 80039d8:	4622      	mov	r2, r4
 80039da:	462b      	mov	r3, r5
 80039dc:	f7fc fdb0 	bl	8000540 <__aeabi_dmul>
 80039e0:	4602      	mov	r2, r0
 80039e2:	460b      	mov	r3, r1
 80039e4:	4640      	mov	r0, r8
 80039e6:	4649      	mov	r1, r9
 80039e8:	f7fc fbf2 	bl	80001d0 <__aeabi_dsub>
 80039ec:	4604      	mov	r4, r0
 80039ee:	460d      	mov	r5, r1
 80039f0:	4602      	mov	r2, r0
 80039f2:	460b      	mov	r3, r1
 80039f4:	4640      	mov	r0, r8
 80039f6:	4649      	mov	r1, r9
 80039f8:	f7fc fda2 	bl	8000540 <__aeabi_dmul>
 80039fc:	2200      	movs	r2, #0
 80039fe:	ec41 0b19 	vmov	d9, r0, r1
 8003a02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003a06:	4620      	mov	r0, r4
 8003a08:	4629      	mov	r1, r5
 8003a0a:	f7fc fbe1 	bl	80001d0 <__aeabi_dsub>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	460b      	mov	r3, r1
 8003a12:	ec51 0b19 	vmov	r0, r1, d9
 8003a16:	f7fc febd 	bl	8000794 <__aeabi_ddiv>
 8003a1a:	4632      	mov	r2, r6
 8003a1c:	4604      	mov	r4, r0
 8003a1e:	460d      	mov	r5, r1
 8003a20:	463b      	mov	r3, r7
 8003a22:	4640      	mov	r0, r8
 8003a24:	4649      	mov	r1, r9
 8003a26:	f7fc fd8b 	bl	8000540 <__aeabi_dmul>
 8003a2a:	4632      	mov	r2, r6
 8003a2c:	463b      	mov	r3, r7
 8003a2e:	f7fc fbd1 	bl	80001d4 <__adddf3>
 8003a32:	4602      	mov	r2, r0
 8003a34:	460b      	mov	r3, r1
 8003a36:	4620      	mov	r0, r4
 8003a38:	4629      	mov	r1, r5
 8003a3a:	f7fc fbc9 	bl	80001d0 <__aeabi_dsub>
 8003a3e:	4642      	mov	r2, r8
 8003a40:	464b      	mov	r3, r9
 8003a42:	f7fc fbc5 	bl	80001d0 <__aeabi_dsub>
 8003a46:	460b      	mov	r3, r1
 8003a48:	4602      	mov	r2, r0
 8003a4a:	4939      	ldr	r1, [pc, #228]	; (8003b30 <__ieee754_pow+0xa40>)
 8003a4c:	2000      	movs	r0, #0
 8003a4e:	f7fc fbbf 	bl	80001d0 <__aeabi_dsub>
 8003a52:	ec41 0b10 	vmov	d0, r0, r1
 8003a56:	ee10 3a90 	vmov	r3, s1
 8003a5a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8003a5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a62:	da2b      	bge.n	8003abc <__ieee754_pow+0x9cc>
 8003a64:	4650      	mov	r0, sl
 8003a66:	f000 f877 	bl	8003b58 <scalbn>
 8003a6a:	ec51 0b10 	vmov	r0, r1, d0
 8003a6e:	ec53 2b18 	vmov	r2, r3, d8
 8003a72:	f7ff bbee 	b.w	8003252 <__ieee754_pow+0x162>
 8003a76:	4b2f      	ldr	r3, [pc, #188]	; (8003b34 <__ieee754_pow+0xa44>)
 8003a78:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8003a7c:	429e      	cmp	r6, r3
 8003a7e:	f77f af0d 	ble.w	800389c <__ieee754_pow+0x7ac>
 8003a82:	4b2d      	ldr	r3, [pc, #180]	; (8003b38 <__ieee754_pow+0xa48>)
 8003a84:	440b      	add	r3, r1
 8003a86:	4303      	orrs	r3, r0
 8003a88:	d009      	beq.n	8003a9e <__ieee754_pow+0x9ae>
 8003a8a:	ec51 0b18 	vmov	r0, r1, d8
 8003a8e:	2200      	movs	r2, #0
 8003a90:	2300      	movs	r3, #0
 8003a92:	f7fc ffc7 	bl	8000a24 <__aeabi_dcmplt>
 8003a96:	3800      	subs	r0, #0
 8003a98:	bf18      	it	ne
 8003a9a:	2001      	movne	r0, #1
 8003a9c:	e448      	b.n	8003330 <__ieee754_pow+0x240>
 8003a9e:	4622      	mov	r2, r4
 8003aa0:	462b      	mov	r3, r5
 8003aa2:	f7fc fb95 	bl	80001d0 <__aeabi_dsub>
 8003aa6:	4642      	mov	r2, r8
 8003aa8:	464b      	mov	r3, r9
 8003aaa:	f7fc ffcf 	bl	8000a4c <__aeabi_dcmpge>
 8003aae:	2800      	cmp	r0, #0
 8003ab0:	f43f aef4 	beq.w	800389c <__ieee754_pow+0x7ac>
 8003ab4:	e7e9      	b.n	8003a8a <__ieee754_pow+0x99a>
 8003ab6:	f04f 0a00 	mov.w	sl, #0
 8003aba:	e71a      	b.n	80038f2 <__ieee754_pow+0x802>
 8003abc:	ec51 0b10 	vmov	r0, r1, d0
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	e7d4      	b.n	8003a6e <__ieee754_pow+0x97e>
 8003ac4:	491a      	ldr	r1, [pc, #104]	; (8003b30 <__ieee754_pow+0xa40>)
 8003ac6:	2000      	movs	r0, #0
 8003ac8:	f7ff bb31 	b.w	800312e <__ieee754_pow+0x3e>
 8003acc:	2000      	movs	r0, #0
 8003ace:	2100      	movs	r1, #0
 8003ad0:	f7ff bb2d 	b.w	800312e <__ieee754_pow+0x3e>
 8003ad4:	4630      	mov	r0, r6
 8003ad6:	4639      	mov	r1, r7
 8003ad8:	f7ff bb29 	b.w	800312e <__ieee754_pow+0x3e>
 8003adc:	9204      	str	r2, [sp, #16]
 8003ade:	f7ff bb7b 	b.w	80031d8 <__ieee754_pow+0xe8>
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	f7ff bb65 	b.w	80031b2 <__ieee754_pow+0xc2>
 8003ae8:	00000000 	.word	0x00000000
 8003aec:	3fe62e43 	.word	0x3fe62e43
 8003af0:	fefa39ef 	.word	0xfefa39ef
 8003af4:	3fe62e42 	.word	0x3fe62e42
 8003af8:	0ca86c39 	.word	0x0ca86c39
 8003afc:	be205c61 	.word	0xbe205c61
 8003b00:	72bea4d0 	.word	0x72bea4d0
 8003b04:	3e663769 	.word	0x3e663769
 8003b08:	c5d26bf1 	.word	0xc5d26bf1
 8003b0c:	3ebbbd41 	.word	0x3ebbbd41
 8003b10:	af25de2c 	.word	0xaf25de2c
 8003b14:	3f11566a 	.word	0x3f11566a
 8003b18:	16bebd93 	.word	0x16bebd93
 8003b1c:	3f66c16c 	.word	0x3f66c16c
 8003b20:	5555553e 	.word	0x5555553e
 8003b24:	3fc55555 	.word	0x3fc55555
 8003b28:	3fe00000 	.word	0x3fe00000
 8003b2c:	fff00000 	.word	0xfff00000
 8003b30:	3ff00000 	.word	0x3ff00000
 8003b34:	4090cbff 	.word	0x4090cbff
 8003b38:	3f6f3400 	.word	0x3f6f3400
 8003b3c:	652b82fe 	.word	0x652b82fe
 8003b40:	3c971547 	.word	0x3c971547

08003b44 <fabs>:
 8003b44:	ec51 0b10 	vmov	r0, r1, d0
 8003b48:	ee10 2a10 	vmov	r2, s0
 8003b4c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003b50:	ec43 2b10 	vmov	d0, r2, r3
 8003b54:	4770      	bx	lr
	...

08003b58 <scalbn>:
 8003b58:	b570      	push	{r4, r5, r6, lr}
 8003b5a:	ec55 4b10 	vmov	r4, r5, d0
 8003b5e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8003b62:	4606      	mov	r6, r0
 8003b64:	462b      	mov	r3, r5
 8003b66:	b999      	cbnz	r1, 8003b90 <scalbn+0x38>
 8003b68:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8003b6c:	4323      	orrs	r3, r4
 8003b6e:	d03f      	beq.n	8003bf0 <scalbn+0x98>
 8003b70:	4b35      	ldr	r3, [pc, #212]	; (8003c48 <scalbn+0xf0>)
 8003b72:	4629      	mov	r1, r5
 8003b74:	ee10 0a10 	vmov	r0, s0
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f7fc fce1 	bl	8000540 <__aeabi_dmul>
 8003b7e:	4b33      	ldr	r3, [pc, #204]	; (8003c4c <scalbn+0xf4>)
 8003b80:	429e      	cmp	r6, r3
 8003b82:	4604      	mov	r4, r0
 8003b84:	460d      	mov	r5, r1
 8003b86:	da10      	bge.n	8003baa <scalbn+0x52>
 8003b88:	a327      	add	r3, pc, #156	; (adr r3, 8003c28 <scalbn+0xd0>)
 8003b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b8e:	e01f      	b.n	8003bd0 <scalbn+0x78>
 8003b90:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003b94:	4291      	cmp	r1, r2
 8003b96:	d10c      	bne.n	8003bb2 <scalbn+0x5a>
 8003b98:	ee10 2a10 	vmov	r2, s0
 8003b9c:	4620      	mov	r0, r4
 8003b9e:	4629      	mov	r1, r5
 8003ba0:	f7fc fb18 	bl	80001d4 <__adddf3>
 8003ba4:	4604      	mov	r4, r0
 8003ba6:	460d      	mov	r5, r1
 8003ba8:	e022      	b.n	8003bf0 <scalbn+0x98>
 8003baa:	460b      	mov	r3, r1
 8003bac:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8003bb0:	3936      	subs	r1, #54	; 0x36
 8003bb2:	f24c 3250 	movw	r2, #50000	; 0xc350
 8003bb6:	4296      	cmp	r6, r2
 8003bb8:	dd0d      	ble.n	8003bd6 <scalbn+0x7e>
 8003bba:	2d00      	cmp	r5, #0
 8003bbc:	a11c      	add	r1, pc, #112	; (adr r1, 8003c30 <scalbn+0xd8>)
 8003bbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003bc2:	da02      	bge.n	8003bca <scalbn+0x72>
 8003bc4:	a11c      	add	r1, pc, #112	; (adr r1, 8003c38 <scalbn+0xe0>)
 8003bc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003bca:	a319      	add	r3, pc, #100	; (adr r3, 8003c30 <scalbn+0xd8>)
 8003bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd0:	f7fc fcb6 	bl	8000540 <__aeabi_dmul>
 8003bd4:	e7e6      	b.n	8003ba4 <scalbn+0x4c>
 8003bd6:	1872      	adds	r2, r6, r1
 8003bd8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8003bdc:	428a      	cmp	r2, r1
 8003bde:	dcec      	bgt.n	8003bba <scalbn+0x62>
 8003be0:	2a00      	cmp	r2, #0
 8003be2:	dd08      	ble.n	8003bf6 <scalbn+0x9e>
 8003be4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003be8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003bec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003bf0:	ec45 4b10 	vmov	d0, r4, r5
 8003bf4:	bd70      	pop	{r4, r5, r6, pc}
 8003bf6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8003bfa:	da08      	bge.n	8003c0e <scalbn+0xb6>
 8003bfc:	2d00      	cmp	r5, #0
 8003bfe:	a10a      	add	r1, pc, #40	; (adr r1, 8003c28 <scalbn+0xd0>)
 8003c00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c04:	dac0      	bge.n	8003b88 <scalbn+0x30>
 8003c06:	a10e      	add	r1, pc, #56	; (adr r1, 8003c40 <scalbn+0xe8>)
 8003c08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c0c:	e7bc      	b.n	8003b88 <scalbn+0x30>
 8003c0e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003c12:	3236      	adds	r2, #54	; 0x36
 8003c14:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003c18:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8003c1c:	4620      	mov	r0, r4
 8003c1e:	4b0c      	ldr	r3, [pc, #48]	; (8003c50 <scalbn+0xf8>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	e7d5      	b.n	8003bd0 <scalbn+0x78>
 8003c24:	f3af 8000 	nop.w
 8003c28:	c2f8f359 	.word	0xc2f8f359
 8003c2c:	01a56e1f 	.word	0x01a56e1f
 8003c30:	8800759c 	.word	0x8800759c
 8003c34:	7e37e43c 	.word	0x7e37e43c
 8003c38:	8800759c 	.word	0x8800759c
 8003c3c:	fe37e43c 	.word	0xfe37e43c
 8003c40:	c2f8f359 	.word	0xc2f8f359
 8003c44:	81a56e1f 	.word	0x81a56e1f
 8003c48:	43500000 	.word	0x43500000
 8003c4c:	ffff3cb0 	.word	0xffff3cb0
 8003c50:	3c900000 	.word	0x3c900000

08003c54 <with_errno>:
 8003c54:	b570      	push	{r4, r5, r6, lr}
 8003c56:	4604      	mov	r4, r0
 8003c58:	460d      	mov	r5, r1
 8003c5a:	4616      	mov	r6, r2
 8003c5c:	f7ff f9a0 	bl	8002fa0 <__errno>
 8003c60:	4629      	mov	r1, r5
 8003c62:	6006      	str	r6, [r0, #0]
 8003c64:	4620      	mov	r0, r4
 8003c66:	bd70      	pop	{r4, r5, r6, pc}

08003c68 <xflow>:
 8003c68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003c6a:	4614      	mov	r4, r2
 8003c6c:	461d      	mov	r5, r3
 8003c6e:	b108      	cbz	r0, 8003c74 <xflow+0xc>
 8003c70:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003c74:	e9cd 2300 	strd	r2, r3, [sp]
 8003c78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003c7c:	4620      	mov	r0, r4
 8003c7e:	4629      	mov	r1, r5
 8003c80:	f7fc fc5e 	bl	8000540 <__aeabi_dmul>
 8003c84:	2222      	movs	r2, #34	; 0x22
 8003c86:	b003      	add	sp, #12
 8003c88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c8c:	f7ff bfe2 	b.w	8003c54 <with_errno>

08003c90 <__math_uflow>:
 8003c90:	b508      	push	{r3, lr}
 8003c92:	2200      	movs	r2, #0
 8003c94:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003c98:	f7ff ffe6 	bl	8003c68 <xflow>
 8003c9c:	ec41 0b10 	vmov	d0, r0, r1
 8003ca0:	bd08      	pop	{r3, pc}

08003ca2 <__math_oflow>:
 8003ca2:	b508      	push	{r3, lr}
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8003caa:	f7ff ffdd 	bl	8003c68 <xflow>
 8003cae:	ec41 0b10 	vmov	d0, r0, r1
 8003cb2:	bd08      	pop	{r3, pc}

08003cb4 <__ieee754_sqrt>:
 8003cb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cb8:	ec55 4b10 	vmov	r4, r5, d0
 8003cbc:	4e67      	ldr	r6, [pc, #412]	; (8003e5c <__ieee754_sqrt+0x1a8>)
 8003cbe:	43ae      	bics	r6, r5
 8003cc0:	ee10 0a10 	vmov	r0, s0
 8003cc4:	ee10 2a10 	vmov	r2, s0
 8003cc8:	4629      	mov	r1, r5
 8003cca:	462b      	mov	r3, r5
 8003ccc:	d10d      	bne.n	8003cea <__ieee754_sqrt+0x36>
 8003cce:	f7fc fc37 	bl	8000540 <__aeabi_dmul>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	4620      	mov	r0, r4
 8003cd8:	4629      	mov	r1, r5
 8003cda:	f7fc fa7b 	bl	80001d4 <__adddf3>
 8003cde:	4604      	mov	r4, r0
 8003ce0:	460d      	mov	r5, r1
 8003ce2:	ec45 4b10 	vmov	d0, r4, r5
 8003ce6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cea:	2d00      	cmp	r5, #0
 8003cec:	dc0b      	bgt.n	8003d06 <__ieee754_sqrt+0x52>
 8003cee:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8003cf2:	4326      	orrs	r6, r4
 8003cf4:	d0f5      	beq.n	8003ce2 <__ieee754_sqrt+0x2e>
 8003cf6:	b135      	cbz	r5, 8003d06 <__ieee754_sqrt+0x52>
 8003cf8:	f7fc fa6a 	bl	80001d0 <__aeabi_dsub>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	460b      	mov	r3, r1
 8003d00:	f7fc fd48 	bl	8000794 <__aeabi_ddiv>
 8003d04:	e7eb      	b.n	8003cde <__ieee754_sqrt+0x2a>
 8003d06:	1509      	asrs	r1, r1, #20
 8003d08:	f000 808d 	beq.w	8003e26 <__ieee754_sqrt+0x172>
 8003d0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d10:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8003d14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d18:	07c9      	lsls	r1, r1, #31
 8003d1a:	bf5c      	itt	pl
 8003d1c:	005b      	lslpl	r3, r3, #1
 8003d1e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8003d22:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003d26:	bf58      	it	pl
 8003d28:	0052      	lslpl	r2, r2, #1
 8003d2a:	2500      	movs	r5, #0
 8003d2c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8003d30:	1076      	asrs	r6, r6, #1
 8003d32:	0052      	lsls	r2, r2, #1
 8003d34:	f04f 0e16 	mov.w	lr, #22
 8003d38:	46ac      	mov	ip, r5
 8003d3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003d3e:	eb0c 0001 	add.w	r0, ip, r1
 8003d42:	4298      	cmp	r0, r3
 8003d44:	bfde      	ittt	le
 8003d46:	1a1b      	suble	r3, r3, r0
 8003d48:	eb00 0c01 	addle.w	ip, r0, r1
 8003d4c:	186d      	addle	r5, r5, r1
 8003d4e:	005b      	lsls	r3, r3, #1
 8003d50:	f1be 0e01 	subs.w	lr, lr, #1
 8003d54:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8003d58:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8003d5c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8003d60:	d1ed      	bne.n	8003d3e <__ieee754_sqrt+0x8a>
 8003d62:	4674      	mov	r4, lr
 8003d64:	2720      	movs	r7, #32
 8003d66:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003d6a:	4563      	cmp	r3, ip
 8003d6c:	eb01 000e 	add.w	r0, r1, lr
 8003d70:	dc02      	bgt.n	8003d78 <__ieee754_sqrt+0xc4>
 8003d72:	d113      	bne.n	8003d9c <__ieee754_sqrt+0xe8>
 8003d74:	4290      	cmp	r0, r2
 8003d76:	d811      	bhi.n	8003d9c <__ieee754_sqrt+0xe8>
 8003d78:	2800      	cmp	r0, #0
 8003d7a:	eb00 0e01 	add.w	lr, r0, r1
 8003d7e:	da57      	bge.n	8003e30 <__ieee754_sqrt+0x17c>
 8003d80:	f1be 0f00 	cmp.w	lr, #0
 8003d84:	db54      	blt.n	8003e30 <__ieee754_sqrt+0x17c>
 8003d86:	f10c 0801 	add.w	r8, ip, #1
 8003d8a:	eba3 030c 	sub.w	r3, r3, ip
 8003d8e:	4290      	cmp	r0, r2
 8003d90:	bf88      	it	hi
 8003d92:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8003d96:	1a12      	subs	r2, r2, r0
 8003d98:	440c      	add	r4, r1
 8003d9a:	46c4      	mov	ip, r8
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	3f01      	subs	r7, #1
 8003da0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8003da4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8003da8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8003dac:	d1dd      	bne.n	8003d6a <__ieee754_sqrt+0xb6>
 8003dae:	4313      	orrs	r3, r2
 8003db0:	d01b      	beq.n	8003dea <__ieee754_sqrt+0x136>
 8003db2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8003e60 <__ieee754_sqrt+0x1ac>
 8003db6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8003e64 <__ieee754_sqrt+0x1b0>
 8003dba:	e9da 0100 	ldrd	r0, r1, [sl]
 8003dbe:	e9db 2300 	ldrd	r2, r3, [fp]
 8003dc2:	f7fc fa05 	bl	80001d0 <__aeabi_dsub>
 8003dc6:	e9da 8900 	ldrd	r8, r9, [sl]
 8003dca:	4602      	mov	r2, r0
 8003dcc:	460b      	mov	r3, r1
 8003dce:	4640      	mov	r0, r8
 8003dd0:	4649      	mov	r1, r9
 8003dd2:	f7fc fe31 	bl	8000a38 <__aeabi_dcmple>
 8003dd6:	b140      	cbz	r0, 8003dea <__ieee754_sqrt+0x136>
 8003dd8:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8003ddc:	e9da 0100 	ldrd	r0, r1, [sl]
 8003de0:	e9db 2300 	ldrd	r2, r3, [fp]
 8003de4:	d126      	bne.n	8003e34 <__ieee754_sqrt+0x180>
 8003de6:	3501      	adds	r5, #1
 8003de8:	463c      	mov	r4, r7
 8003dea:	106a      	asrs	r2, r5, #1
 8003dec:	0863      	lsrs	r3, r4, #1
 8003dee:	07e9      	lsls	r1, r5, #31
 8003df0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8003df4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8003df8:	bf48      	it	mi
 8003dfa:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8003dfe:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8003e02:	461c      	mov	r4, r3
 8003e04:	e76d      	b.n	8003ce2 <__ieee754_sqrt+0x2e>
 8003e06:	0ad3      	lsrs	r3, r2, #11
 8003e08:	3815      	subs	r0, #21
 8003e0a:	0552      	lsls	r2, r2, #21
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d0fa      	beq.n	8003e06 <__ieee754_sqrt+0x152>
 8003e10:	02dc      	lsls	r4, r3, #11
 8003e12:	d50a      	bpl.n	8003e2a <__ieee754_sqrt+0x176>
 8003e14:	f1c1 0420 	rsb	r4, r1, #32
 8003e18:	fa22 f404 	lsr.w	r4, r2, r4
 8003e1c:	1e4d      	subs	r5, r1, #1
 8003e1e:	408a      	lsls	r2, r1
 8003e20:	4323      	orrs	r3, r4
 8003e22:	1b41      	subs	r1, r0, r5
 8003e24:	e772      	b.n	8003d0c <__ieee754_sqrt+0x58>
 8003e26:	4608      	mov	r0, r1
 8003e28:	e7f0      	b.n	8003e0c <__ieee754_sqrt+0x158>
 8003e2a:	005b      	lsls	r3, r3, #1
 8003e2c:	3101      	adds	r1, #1
 8003e2e:	e7ef      	b.n	8003e10 <__ieee754_sqrt+0x15c>
 8003e30:	46e0      	mov	r8, ip
 8003e32:	e7aa      	b.n	8003d8a <__ieee754_sqrt+0xd6>
 8003e34:	f7fc f9ce 	bl	80001d4 <__adddf3>
 8003e38:	e9da 8900 	ldrd	r8, r9, [sl]
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	460b      	mov	r3, r1
 8003e40:	4640      	mov	r0, r8
 8003e42:	4649      	mov	r1, r9
 8003e44:	f7fc fdee 	bl	8000a24 <__aeabi_dcmplt>
 8003e48:	b120      	cbz	r0, 8003e54 <__ieee754_sqrt+0x1a0>
 8003e4a:	1ca0      	adds	r0, r4, #2
 8003e4c:	bf08      	it	eq
 8003e4e:	3501      	addeq	r5, #1
 8003e50:	3402      	adds	r4, #2
 8003e52:	e7ca      	b.n	8003dea <__ieee754_sqrt+0x136>
 8003e54:	3401      	adds	r4, #1
 8003e56:	f024 0401 	bic.w	r4, r4, #1
 8003e5a:	e7c6      	b.n	8003dea <__ieee754_sqrt+0x136>
 8003e5c:	7ff00000 	.word	0x7ff00000
 8003e60:	20000060 	.word	0x20000060
 8003e64:	20000068 	.word	0x20000068

08003e68 <_init>:
 8003e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e6a:	bf00      	nop
 8003e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e6e:	bc08      	pop	{r3}
 8003e70:	469e      	mov	lr, r3
 8003e72:	4770      	bx	lr

08003e74 <_fini>:
 8003e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e76:	bf00      	nop
 8003e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e7a:	bc08      	pop	{r3}
 8003e7c:	469e      	mov	lr, r3
 8003e7e:	4770      	bx	lr
